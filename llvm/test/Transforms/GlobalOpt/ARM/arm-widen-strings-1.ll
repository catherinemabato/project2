; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -mtriple=arm-arm-none-eabi -passes=globalopt -S | FileCheck %s
; RUN: opt < %s -mtriple=arm-arm-none-eabi -passes="default<O0>" -S | FileCheck %s --check-prefix=TURNED-OFF

; CHECK: [12 x i8]
; TURNED-OFF-NOT: [12 x i8]
@.str = private unnamed_addr constant [10 x i8] c"123456789\00", align 1

define hidden void @foo() local_unnamed_addr {
; CHECK-LABEL: define hidden void @foo() local_unnamed_addr {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[SOMETHING:%.*]] = alloca [12 x i8], align 1
; CHECK-NEXT:    [[TMP0:%.*]] = alloca [10 x i8], align 1
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(10) [[SOMETHING]], ptr noundef nonnull align 1 dereferenceable(10) @.str, i32 12, i1 false)
; CHECK-NEXT:    [[CALL2:%.*]] = call i32 @bar(ptr nonnull [[SOMETHING]])
; CHECK-NEXT:    ret void
;
; TURNED-OFF-LABEL: define hidden void @foo() local_unnamed_addr {
; TURNED-OFF-NEXT:  [[ENTRY:.*:]]
; TURNED-OFF-NEXT:    [[SOMETHING:%.*]] = alloca [10 x i8], align 1
; TURNED-OFF-NEXT:    call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(10) [[SOMETHING]], ptr noundef nonnull align 1 dereferenceable(10) @.str, i32 10, i1 false)
; TURNED-OFF-NEXT:    [[CALL2:%.*]] = call i32 @bar(ptr nonnull [[SOMETHING]])
; TURNED-OFF-NEXT:    ret void
;
entry:
  %something = alloca [10 x i8], align 1
  call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(10) %something, ptr noundef nonnull align 1 dereferenceable(10) @.str, i32 10, i1 false)
  %call2 = call i32 @bar(ptr nonnull %something)
  ret void
}

declare i32 @bar(...) local_unnamed_addr
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #0
