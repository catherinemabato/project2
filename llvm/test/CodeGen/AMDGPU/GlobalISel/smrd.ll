; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=amdgcn -mcpu=tahiti -show-mc-encoding -verify-machineinstrs -global-isel | FileCheck --check-prefixes=SI,GCN %s
; RUN: llc < %s -mtriple=amdgcn -mcpu=bonaire -show-mc-encoding -verify-machineinstrs -global-isel | FileCheck --check-prefixes=CI,GCN,SICIVI %s
; RUN: llc < %s -mtriple=amdgcn -mcpu=tonga -show-mc-encoding -verify-machineinstrs -global-isel | FileCheck --check-prefixes=VI,GCN,SICIVI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 -show-mc-encoding -verify-machineinstrs -global-isel < %s | FileCheck --check-prefixes=GFX9_10,GCN,VIGFX9_10,SIVIGFX9_10  %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1010 -show-mc-encoding -verify-machineinstrs -global-isel < %s | FileCheck --check-prefixes=GFX9_10,GCN,VIGFX9_10,SIVIGFX9_10  %s

; SMRD load with an immediate offset.
; GCN-LABEL: {{^}}smrd0:
; SICI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x1 ; encoding: [0x01
; VIGFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x4
define amdgpu_kernel void @smrd0(ptr addrspace(4) %ptr) {
; SI-LABEL: smrd0:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_load_dword s0, s[0:1], 0x1 ; encoding: [0x01,0x01,0x00,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd0:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_load_dword s0, s[0:1], 0x1 ; encoding: [0x01,0x01,0x00,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd0:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x24 ; encoding: [0x02,0x00,0x06,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_load_dword s0, s[0:1], 0x4 ; encoding: [0x00,0x00,0x02,0xc0,0x04,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v0 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %0 = getelementptr i32, ptr addrspace(4) %ptr, i64 1
  %1 = load i32, ptr addrspace(4) %0
  store i32 %1, ptr addrspace(1) undef
  ret void
}

; SMRD load with the largest possible immediate offset.
; GCN-LABEL: {{^}}smrd1:
; SICI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0xff ; encoding: [0xff,0x{{[0-9]+[137]}}
; VIGFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x3fc
define amdgpu_kernel void @smrd1(ptr addrspace(4) %ptr) {
; SI-LABEL: smrd1:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_load_dword s0, s[0:1], 0xff ; encoding: [0xff,0x01,0x00,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd1:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_load_dword s0, s[0:1], 0xff ; encoding: [0xff,0x01,0x00,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd1:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x24 ; encoding: [0x02,0x00,0x06,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_load_dword s0, s[0:1], 0x3fc ; encoding: [0x00,0x00,0x02,0xc0,0xfc,0x03,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v0 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %0 = getelementptr i32, ptr addrspace(4) %ptr, i64 255
  %1 = load i32, ptr addrspace(4) %0
  store i32 %1, ptr addrspace(1) undef
  ret void
}

; SMRD load with an offset greater than the largest possible immediate.
; GCN-LABEL: {{^}}smrd2:
; SI: s_movk_i32 s[[OFFSET:[0-9]]], 0x400
; SI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], s[[OFFSET]] ; encoding: [0x0[[OFFSET]]
; CI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x100
; VIGFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x400
; GCN: s_endpgm
define amdgpu_kernel void @smrd2(ptr addrspace(4) %ptr) {
; SI-LABEL: smrd2:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; SI-NEXT:    s_movk_i32 s2, 0x400 ; encoding: [0x00,0x04,0x02,0xb0]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_load_dword s0, s[0:1], s2 ; encoding: [0x02,0x00,0x00,0xc0]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd2:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_load_dword s0, s[0:1], 0x100 ; encoding: [0xff,0x00,0x00,0xc0,0x00,0x01,0x00,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd2:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x24 ; encoding: [0x02,0x00,0x06,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_load_dword s0, s[0:1], 0x400 ; encoding: [0x00,0x00,0x02,0xc0,0x00,0x04,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v0 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %0 = getelementptr i32, ptr addrspace(4) %ptr, i64 256
  %1 = load i32, ptr addrspace(4) %0
  store i32 %1, ptr addrspace(1) undef
  ret void
}

; SMRD load with a 64-bit offset
; GCN-LABEL: {{^}}smrd3:
; FIXME: There are too many copies here because we don't fold immediates
;        through REG_SEQUENCE
; XSI: s_load_dwordx2 s[{{[0-9]:[0-9]}}], s[{{[0-9]:[0-9]}}], 0xb ; encoding: [0x0b
; TODO: Add VI checks
; XGCN: s_endpgm
define amdgpu_kernel void @smrd3(ptr addrspace(4) %ptr) {
; SI-LABEL: smrd3:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_add_u32 s0, s0, 0 ; encoding: [0x00,0x80,0x00,0x80]
; SI-NEXT:    s_addc_u32 s1, s1, 4 ; encoding: [0x01,0x84,0x01,0x82]
; SI-NEXT:    s_load_dword s0, s[0:1], 0x0 ; encoding: [0x00,0x01,0x00,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd3:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_add_u32 s0, s0, 0 ; encoding: [0x00,0x80,0x00,0x80]
; CI-NEXT:    s_addc_u32 s1, s1, 4 ; encoding: [0x01,0x84,0x01,0x82]
; CI-NEXT:    s_load_dword s0, s[0:1], 0x0 ; encoding: [0x00,0x01,0x00,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd3:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x24 ; encoding: [0x02,0x00,0x06,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_add_u32 s0, s0, 0 ; encoding: [0x00,0x80,0x00,0x80]
; VI-NEXT:    s_addc_u32 s1, s1, 4 ; encoding: [0x01,0x84,0x01,0x82]
; VI-NEXT:    s_load_dword s0, s[0:1], 0x0 ; encoding: [0x00,0x00,0x02,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v0 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %0 = getelementptr i32, ptr addrspace(4) %ptr, i64 4294967296 ; 2 ^ 32
  %1 = load i32, ptr addrspace(4) %0
  store i32 %1, ptr addrspace(1) undef
  ret void
}

; SMRD load with the largest possible immediate offset on VI
; GCN-LABEL: {{^}}smrd4:
; SI: s_mov_b32 [[OFFSET:s[0-9]+]], 0xffffc
; SI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], [[OFFSET]]
; CI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x3ffff
; VI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0xffffc
; GFX9_10: s_mov_b32 [[OFFSET:s[0-9]+]], 0xffffc
; GFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], [[OFFSET]]
define amdgpu_kernel void @smrd4(ptr addrspace(4) %ptr) {
; SI-LABEL: smrd4:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; SI-NEXT:    s_mov_b32 s2, 0xffffc ; encoding: [0xff,0x03,0x82,0xbe,0xfc,0xff,0x0f,0x00]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_load_dword s0, s[0:1], s2 ; encoding: [0x02,0x00,0x00,0xc0]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd4:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_load_dword s0, s[0:1], 0x3ffff ; encoding: [0xff,0x00,0x00,0xc0,0xff,0xff,0x03,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd4:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x24 ; encoding: [0x02,0x00,0x06,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_load_dword s0, s[0:1], 0xffffc ; encoding: [0x00,0x00,0x02,0xc0,0xfc,0xff,0x0f,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v0 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %0 = getelementptr i32, ptr addrspace(4) %ptr, i64 262143
  %1 = load i32, ptr addrspace(4) %0
  store i32 %1, ptr addrspace(1) undef
  ret void
}

; SMRD load with an offset greater than the largest possible immediate on VI
; GCN-LABEL: {{^}}smrd5:
; SIVIGFX9_10: s_mov_b32 [[OFFSET:s[0-9]+]], 0x100000
; SIVIGFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], [[OFFSET]]
; CI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x40000
; GCN: s_endpgm
define amdgpu_kernel void @smrd5(ptr addrspace(4) %ptr) {
; SI-LABEL: smrd5:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; SI-NEXT:    s_mov_b32 s2, 0x100000 ; encoding: [0xff,0x03,0x82,0xbe,0x00,0x00,0x10,0x00]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_load_dword s0, s[0:1], s2 ; encoding: [0x02,0x00,0x00,0xc0]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd5:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_load_dword s0, s[0:1], 0x40000 ; encoding: [0xff,0x00,0x00,0xc0,0x00,0x00,0x04,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd5:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x24 ; encoding: [0x02,0x00,0x06,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_mov_b32 s2, 0x100000 ; encoding: [0xff,0x00,0x82,0xbe,0x00,0x00,0x10,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_load_dword s0, s[0:1], s2 ; encoding: [0x00,0x00,0x00,0xc0,0x02,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v0 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %0 = getelementptr i32, ptr addrspace(4) %ptr, i64 262144
  %1 = load i32, ptr addrspace(4) %0
  store i32 %1, ptr addrspace(1) undef
  ret void
}

; GFX9+ can use a signed immediate byte offset but not without sgpr[offset]
; GCN-LABEL: {{^}}smrd6:
; SICIVI: s_add_u32 s{{[0-9]}}, s{{[0-9]}}, -4
; SICIVI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x0
; GFX9_10: s_add_u32 s0, s6, -4
; GFX9_10: s_addc_u32 s1, s7, -1
; GFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x0
define amdgpu_kernel void @smrd6(ptr addrspace(1) %out, ptr addrspace(4) %ptr) #0 {
; SI-LABEL: smrd6:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_add_u32 s2, s2, -4 ; encoding: [0x02,0xc4,0x02,0x80]
; SI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; SI-NEXT:    s_load_dword s3, s[2:3], 0x0 ; encoding: [0x00,0x83,0x01,0xc0]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s3 ; encoding: [0x03,0x02,0x00,0x7e]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd6:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_add_u32 s2, s2, -4 ; encoding: [0x02,0xc4,0x02,0x80]
; CI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; CI-NEXT:    s_load_dword s3, s[2:3], 0x0 ; encoding: [0x00,0x83,0x01,0xc0]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s3 ; encoding: [0x03,0x02,0x00,0x7e]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd6:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x0a,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_add_u32 s2, s2, -4 ; encoding: [0x02,0xc4,0x02,0x80]
; VI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; VI-NEXT:    s_load_dword s2, s[2:3], 0x0 ; encoding: [0x81,0x00,0x02,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v2 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x02,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %tmp = getelementptr i32, ptr addrspace(4) %ptr, i64 -1
  %tmp1 = load i32, ptr addrspace(4) %tmp
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}

; Don't use a negative SGPR offset
; GCN-LABEL: {{^}}smrd7:
; GCN: s_add_u32 s{{[0-9]}}, s{{[0-9]}}, 0xffe00000
; SICIVI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x0
; GFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x0
define amdgpu_kernel void @smrd7(ptr addrspace(1) %out, ptr addrspace(4) %ptr) #0 {
; SI-LABEL: smrd7:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_add_u32 s2, s2, 0xffe00000 ; encoding: [0x02,0xff,0x02,0x80,0x00,0x00,0xe0,0xff]
; SI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; SI-NEXT:    s_load_dword s3, s[2:3], 0x0 ; encoding: [0x00,0x83,0x01,0xc0]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s3 ; encoding: [0x03,0x02,0x00,0x7e]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd7:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_add_u32 s2, s2, 0xffe00000 ; encoding: [0x02,0xff,0x02,0x80,0x00,0x00,0xe0,0xff]
; CI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; CI-NEXT:    s_load_dword s3, s[2:3], 0x0 ; encoding: [0x00,0x83,0x01,0xc0]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s3 ; encoding: [0x03,0x02,0x00,0x7e]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd7:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x0a,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_add_u32 s2, s2, 0xffe00000 ; encoding: [0x02,0xff,0x02,0x80,0x00,0x00,0xe0,0xff]
; VI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; VI-NEXT:    s_load_dword s2, s[2:3], 0x0 ; encoding: [0x81,0x00,0x02,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v2 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x02,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %tmp = getelementptr i32, ptr addrspace(4) %ptr, i64 -524288
  %tmp1 = load i32, ptr addrspace(4) %tmp
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GCN: {{.*}}
; GFX9_10: {{.*}}
; SICIVI: {{.*}}
; SIVIGFX9_10: {{.*}}
; VIGFX9_10: {{.*}}
