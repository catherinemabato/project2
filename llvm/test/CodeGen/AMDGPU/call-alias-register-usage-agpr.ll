; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -O0 -mtriple=amdgcn-amd-amdhsa -mcpu=gfx908 < %s | FileCheck -check-prefixes=ALL,GFX908 %s
; RUN: llc -O0 -mtriple=amdgcn-amd-amdhsa -mcpu=gfx90a < %s | FileCheck -check-prefixes=ALL,GFX90A %s

; CallGraphAnalysis, which CodeGenSCC order depends on, does not look
; through aliases. If GlobalOpt is never run, we do not see direct
; calls,

@alias = hidden alias void (), ptr @aliasee_default

; ALL-LABEL: {{^}}kernel:
; GFX908: .amdhsa_next_free_vgpr 32
; GFX908-NEXT: .amdhsa_next_free_sgpr 33

; GFX90A: .amdhsa_next_free_vgpr 59
; GFX90A-NEXT: .amdhsa_next_free_sgpr 33
; GFX90A-NEXT: .amdhsa_accum_offset 32
define amdgpu_kernel void @kernel() #0 {
; GFX908-LABEL: kernel:
; GFX908:       ; %bb.0: ; %bb
; GFX908-NEXT:    s_mov_b32 s32, 0x400
; GFX908-NEXT:    s_add_u32 flat_scratch_lo, s12, s17
; GFX908-NEXT:    s_addc_u32 flat_scratch_hi, s13, 0
; GFX908-NEXT:    s_add_u32 s0, s0, s17
; GFX908-NEXT:    s_addc_u32 s1, s1, 0
; GFX908-NEXT:    ; implicit-def: $vgpr3 : SGPR spill to VGPR lane
; GFX908-NEXT:    v_writelane_b32 v3, s16, 0
; GFX908-NEXT:    s_or_saveexec_b64 s[34:35], -1
; GFX908-NEXT:    buffer_store_dword v3, off, s[0:3], 0 ; 4-byte Folded Spill
; GFX908-NEXT:    s_mov_b64 exec, s[34:35]
; GFX908-NEXT:    s_mov_b32 s13, s15
; GFX908-NEXT:    s_mov_b32 s12, s14
; GFX908-NEXT:    v_readlane_b32 s14, v3, 0
; GFX908-NEXT:    s_getpc_b64 s[16:17]
; GFX908-NEXT:    s_add_u32 s16, s16, alias@rel32@lo+4
; GFX908-NEXT:    s_addc_u32 s17, s17, alias@rel32@hi+12
; GFX908-NEXT:    s_mov_b64 s[22:23], s[2:3]
; GFX908-NEXT:    s_mov_b64 s[20:21], s[0:1]
; GFX908-NEXT:    s_mov_b32 s15, 20
; GFX908-NEXT:    v_lshlrev_b32_e64 v2, s15, v2
; GFX908-NEXT:    s_mov_b32 s15, 10
; GFX908-NEXT:    v_lshlrev_b32_e64 v1, s15, v1
; GFX908-NEXT:    v_or3_b32 v31, v0, v1, v2
; GFX908-NEXT:    ; implicit-def: $sgpr15
; GFX908-NEXT:    s_mov_b64 s[0:1], s[20:21]
; GFX908-NEXT:    s_mov_b64 s[2:3], s[22:23]
; GFX908-NEXT:    s_swappc_b64 s[30:31], s[16:17]
; GFX908-NEXT:    s_or_saveexec_b64 s[34:35], -1
; GFX908-NEXT:    buffer_load_dword v0, off, s[0:3], 0 ; 4-byte Folded Reload
; GFX908-NEXT:    s_mov_b64 exec, s[34:35]
; GFX908-NEXT:    ; kill: killed $vgpr0
; GFX908-NEXT:    s_endpgm
;
; GFX90A-LABEL: kernel:
; GFX90A:       ; %bb.0: ; %bb
; GFX90A-NEXT:    s_mov_b32 s32, 0
; GFX90A-NEXT:    s_add_u32 flat_scratch_lo, s12, s17
; GFX90A-NEXT:    s_addc_u32 flat_scratch_hi, s13, 0
; GFX90A-NEXT:    s_add_u32 s0, s0, s17
; GFX90A-NEXT:    s_addc_u32 s1, s1, 0
; GFX90A-NEXT:    ; implicit-def: $vgpr1 : SGPR spill to VGPR lane
; GFX90A-NEXT:    v_writelane_b32 v1, s16, 0
; GFX90A-NEXT:    s_or_saveexec_b64 s[34:35], -1
; GFX90A-NEXT:    v_accvgpr_write_b32 a32, v1 ; Reload Reuse
; GFX90A-NEXT:    s_mov_b64 exec, s[34:35]
; GFX90A-NEXT:    s_mov_b32 s13, s15
; GFX90A-NEXT:    s_mov_b32 s12, s14
; GFX90A-NEXT:    v_readlane_b32 s14, v1, 0
; GFX90A-NEXT:    v_mov_b32_e32 v31, v0
; GFX90A-NEXT:    s_getpc_b64 s[16:17]
; GFX90A-NEXT:    s_add_u32 s16, s16, alias@rel32@lo+4
; GFX90A-NEXT:    s_addc_u32 s17, s17, alias@rel32@hi+12
; GFX90A-NEXT:    s_mov_b64 s[22:23], s[2:3]
; GFX90A-NEXT:    s_mov_b64 s[20:21], s[0:1]
; GFX90A-NEXT:    ; implicit-def: $sgpr15
; GFX90A-NEXT:    s_mov_b64 s[0:1], s[20:21]
; GFX90A-NEXT:    s_mov_b64 s[2:3], s[22:23]
; GFX90A-NEXT:    s_swappc_b64 s[30:31], s[16:17]
; GFX90A-NEXT:    s_or_saveexec_b64 s[34:35], -1
; GFX90A-NEXT:    v_accvgpr_read_b32 v0, a32 ; Reload Reuse
; GFX90A-NEXT:    s_mov_b64 exec, s[34:35]
; GFX90A-NEXT:    ; kill: killed $vgpr0
; GFX90A-NEXT:    s_endpgm
bb:
  call void @alias() #2
  ret void
}

define internal void @aliasee_default() #1 {
; ALL-LABEL: aliasee_default:
; ALL:       ; %bb.0: ; %bb
; ALL-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; ALL-NEXT:    ;;#ASMSTART
; ALL-NEXT:    ; clobber a26
; ALL-NEXT:    ;;#ASMEND
; ALL-NEXT:    s_setpc_b64 s[30:31]
bb:
  call void asm sideeffect "; clobber a26 ", "~{a26}"()
  ret void
}

attributes #0 = { noinline norecurse nounwind optnone }
attributes #1 = { noinline norecurse nounwind readnone willreturn }
attributes #2 = { nounwind readnone willreturn }

!llvm.module.flags = !{!0}
!0 = !{i32 1, !"amdhsa_code_object_version", i32 500}
