; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn -mcpu=tahiti  -verify-machineinstrs -show-mc-encoding < %s | FileCheck --check-prefixes=SI,GCN,SICIVI,SICI,SIVIGFX9_10 %s
; RUN: llc -mtriple=amdgcn -mcpu=bonaire -verify-machineinstrs -show-mc-encoding < %s | FileCheck --check-prefixes=CI,GCN,SICIVI,SICI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga   -verify-machineinstrs -show-mc-encoding < %s | FileCheck --check-prefixes=VI,GCN,SICIVI,VIGFX9_10,SIVIGFX9_10 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900  -verify-machineinstrs -show-mc-encoding < %s | FileCheck --check-prefixes=GFX9_10,GCN,VIGFX9_10,SIVIGFX9_10  %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1010 -verify-machineinstrs -show-mc-encoding < %s | FileCheck --check-prefixes=GFX10,GFX9_10,GCN,VIGFX9_10,SIVIGFX9_10  %s

; SMRD load with an immediate offset.
; GCN-LABEL: {{^}}smrd0:
; SICI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x1 ; encoding: [0x01
; VIGFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x4
define amdgpu_kernel void @smrd0(ptr addrspace(1) %out, ptr addrspace(4) %ptr) #0 {
; SI-LABEL: smrd0:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_load_dword s4, s[2:3], 0x1 ; encoding: [0x01,0x03,0x02,0xc0]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd0:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_load_dword s4, s[2:3], 0x1 ; encoding: [0x01,0x03,0x02,0xc0]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd0:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x0a,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_load_dword s2, s[2:3], 0x4 ; encoding: [0x81,0x00,0x02,0xc0,0x04,0x00,0x00,0x00]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v2 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x02,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd0:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x08,0xf4,0x24,0x00,0x00,0xfa]
; GFX10-NEXT:    v_mov_b32_e32 v0, 0 ; encoding: [0x80,0x02,0x00,0x7e]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_load_dword s2, s[2:3], 0x4 ; encoding: [0x81,0x00,0x00,0xf4,0x04,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; GFX10-NEXT:    global_store_dword v0, v1, s[0:1] ; encoding: [0x00,0x80,0x70,0xdc,0x00,0x01,0x00,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %tmp = getelementptr i32, ptr addrspace(4) %ptr, i64 1
  %tmp1 = load i32, ptr addrspace(4) %tmp
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}

; SMRD load with the largest possible immediate offset.
; GCN-LABEL: {{^}}smrd1:
; SICI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0xff ; encoding: [0xff,0x{{[0-9]+[137]}}
; VIGFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x3fc
define amdgpu_kernel void @smrd1(ptr addrspace(1) %out, ptr addrspace(4) %ptr) #0 {
; SI-LABEL: smrd1:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_load_dword s4, s[2:3], 0xff ; encoding: [0xff,0x03,0x02,0xc0]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd1:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_load_dword s4, s[2:3], 0xff ; encoding: [0xff,0x03,0x02,0xc0]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd1:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x0a,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_load_dword s2, s[2:3], 0x3fc ; encoding: [0x81,0x00,0x02,0xc0,0xfc,0x03,0x00,0x00]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v2 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x02,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd1:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x08,0xf4,0x24,0x00,0x00,0xfa]
; GFX10-NEXT:    v_mov_b32_e32 v0, 0 ; encoding: [0x80,0x02,0x00,0x7e]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_load_dword s2, s[2:3], 0x3fc ; encoding: [0x81,0x00,0x00,0xf4,0xfc,0x03,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; GFX10-NEXT:    global_store_dword v0, v1, s[0:1] ; encoding: [0x00,0x80,0x70,0xdc,0x00,0x01,0x00,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %tmp = getelementptr i32, ptr addrspace(4) %ptr, i64 255
  %tmp1 = load i32, ptr addrspace(4) %tmp
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}

; SMRD load with an offset greater than the largest possible immediate.
; GCN-LABEL: {{^}}smrd2:
; SI: s_movk_i32 s[[OFFSET:[0-9]]], 0x400
; SI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], s[[OFFSET]] ; encoding: [0x0[[OFFSET]]
; CI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x100
; VIGFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x400
; GCN: s_endpgm
define amdgpu_kernel void @smrd2(ptr addrspace(1) %out, ptr addrspace(4) %ptr) #0 {
; SI-LABEL: smrd2:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; SI-NEXT:    s_movk_i32 s4, 0x400 ; encoding: [0x00,0x04,0x04,0xb0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_load_dword s4, s[2:3], s4 ; encoding: [0x04,0x02,0x02,0xc0]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd2:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_load_dword s4, s[2:3], 0x100 ; encoding: [0xff,0x02,0x02,0xc0,0x00,0x01,0x00,0x00]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd2:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x0a,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_load_dword s2, s[2:3], 0x400 ; encoding: [0x81,0x00,0x02,0xc0,0x00,0x04,0x00,0x00]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v2 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x02,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd2:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x08,0xf4,0x24,0x00,0x00,0xfa]
; GFX10-NEXT:    v_mov_b32_e32 v0, 0 ; encoding: [0x80,0x02,0x00,0x7e]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_load_dword s2, s[2:3], 0x400 ; encoding: [0x81,0x00,0x00,0xf4,0x00,0x04,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; GFX10-NEXT:    global_store_dword v0, v1, s[0:1] ; encoding: [0x00,0x80,0x70,0xdc,0x00,0x01,0x00,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %tmp = getelementptr i32, ptr addrspace(4) %ptr, i64 256
  %tmp1 = load i32, ptr addrspace(4) %tmp
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}

; SMRD load with a 64-bit offset
; GCN-LABEL: {{^}}smrd3:
; FIXME: There are too many copies here because we don't fold immediates
;        through REG_SEQUENCE
; SI: s_load_dwordx2 s[{{[0-9]:[0-9]}}], s[{{[0-9]:[0-9]}}], 0x13 ; encoding: [0x13
; TODO: Add VI checks
; GCN: s_endpgm
define amdgpu_kernel void @smrd3(ptr addrspace(1) %out, [8 x i32], ptr addrspace(4) %ptr) #0 {
; SI-LABEL: smrd3:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x13 ; encoding: [0x13,0x05,0x40,0xc0]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_add_u32 s0, s0, 0 ; encoding: [0x00,0x80,0x00,0x80]
; SI-NEXT:    s_addc_u32 s1, s1, 4 ; encoding: [0x01,0x84,0x01,0x82]
; SI-NEXT:    s_load_dword s6, s[0:1], 0x0 ; encoding: [0x00,0x01,0x03,0xc0]
; SI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s6 ; encoding: [0x06,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd3:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x13 ; encoding: [0x13,0x05,0x40,0xc0]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_add_u32 s0, s0, 0 ; encoding: [0x00,0x80,0x00,0x80]
; CI-NEXT:    s_addc_u32 s1, s1, 4 ; encoding: [0x01,0x84,0x01,0x82]
; CI-NEXT:    s_load_dword s6, s[0:1], 0x0 ; encoding: [0x00,0x01,0x03,0xc0]
; CI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9 ; encoding: [0x09,0x05,0x40,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s6 ; encoding: [0x06,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd3:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x4c ; encoding: [0x02,0x00,0x06,0xc0,0x4c,0x00,0x00,0x00]
; VI-NEXT:    s_load_dwordx2 s[2:3], s[4:5], 0x24 ; encoding: [0x82,0x00,0x06,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_add_u32 s0, s0, 0 ; encoding: [0x00,0x80,0x00,0x80]
; VI-NEXT:    s_addc_u32 s1, s1, 4 ; encoding: [0x01,0x84,0x01,0x82]
; VI-NEXT:    s_load_dword s0, s[0:1], 0x0 ; encoding: [0x00,0x00,0x02,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    v_mov_b32_e32 v0, s2 ; encoding: [0x02,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s3 ; encoding: [0x03,0x02,0x02,0x7e]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v2, s0 ; encoding: [0x00,0x02,0x04,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v2 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x02,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd3:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x4c ; encoding: [0x02,0x00,0x04,0xf4,0x4c,0x00,0x00,0xfa]
; GFX10-NEXT:    v_mov_b32_e32 v0, 0 ; encoding: [0x80,0x02,0x00,0x7e]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_add_u32 s0, s0, 0 ; encoding: [0x00,0x80,0x00,0x80]
; GFX10-NEXT:    s_addc_u32 s1, s1, 4 ; encoding: [0x01,0x84,0x01,0x82]
; GFX10-NEXT:    s_load_dword s6, s[0:1], 0x0 ; encoding: [0x80,0x01,0x00,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_load_dwordx2 s[2:3], s[4:5], 0x24 ; encoding: [0x82,0x00,0x04,0xf4,0x24,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v1, s6 ; encoding: [0x06,0x02,0x02,0x7e]
; GFX10-NEXT:    global_store_dword v0, v1, s[2:3] ; encoding: [0x00,0x80,0x70,0xdc,0x00,0x01,0x02,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %tmp = getelementptr i32, ptr addrspace(4) %ptr, i64 4294967296
  %tmp1 = load i32, ptr addrspace(4) %tmp
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}

; SMRD load with the largest possible immediate offset on VI
; GCN-LABEL: {{^}}smrd4:
; SI: s_mov_b32 [[OFFSET:s[0-9]+]], 0xffffc
; SI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], [[OFFSET]]
; CI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x3ffff
; VI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0xffffc
; GFX9_10: s_mov_b32 [[OFFSET:s[0-9]+]], 0xffffc
; GFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], [[OFFSET]]
define amdgpu_kernel void @smrd4(ptr addrspace(1) %out, ptr addrspace(4) %ptr) #0 {
; SI-LABEL: smrd4:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; SI-NEXT:    s_mov_b32 s4, 0xffffc ; encoding: [0xff,0x03,0x84,0xbe,0xfc,0xff,0x0f,0x00]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_load_dword s4, s[2:3], s4 ; encoding: [0x04,0x02,0x02,0xc0]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd4:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_load_dword s4, s[2:3], 0x3ffff ; encoding: [0xff,0x02,0x02,0xc0,0xff,0xff,0x03,0x00]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd4:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x0a,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_load_dword s2, s[2:3], 0xffffc ; encoding: [0x81,0x00,0x02,0xc0,0xfc,0xff,0x0f,0x00]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v2 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x02,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd4:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x08,0xf4,0x24,0x00,0x00,0xfa]
; GFX10-NEXT:    s_mov_b32 s4, 0xffffc ; encoding: [0xff,0x03,0x84,0xbe,0xfc,0xff,0x0f,0x00]
; GFX10-NEXT:    v_mov_b32_e32 v0, 0 ; encoding: [0x80,0x02,0x00,0x7e]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_load_dword s2, s[2:3], s4 offset:0x0 ; encoding: [0x81,0x00,0x00,0xf4,0x00,0x00,0x00,0x08]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; GFX10-NEXT:    global_store_dword v0, v1, s[0:1] ; encoding: [0x00,0x80,0x70,0xdc,0x00,0x01,0x00,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %tmp = getelementptr i32, ptr addrspace(4) %ptr, i64 262143
  %tmp1 = load i32, ptr addrspace(4) %tmp
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}

; SMRD load with an offset greater than the largest possible immediate on VI
; GCN-LABEL: {{^}}smrd5:
; SIVIGFX9_10: s_mov_b32 [[OFFSET:s[0-9]+]], 0x100000
; SIVIGFX9_10: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], [[OFFSET]]
; CI: s_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x40000
; GCN: s_endpgm
define amdgpu_kernel void @smrd5(ptr addrspace(1) %out, ptr addrspace(4) %ptr) #0 {
; SI-LABEL: smrd5:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; SI-NEXT:    s_mov_b32 s4, 0x100000 ; encoding: [0xff,0x03,0x84,0xbe,0x00,0x00,0x10,0x00]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_load_dword s4, s[2:3], s4 ; encoding: [0x04,0x02,0x02,0xc0]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd5:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_load_dword s4, s[2:3], 0x40000 ; encoding: [0xff,0x02,0x02,0xc0,0x00,0x00,0x04,0x00]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd5:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x0a,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_mov_b32 s4, 0x100000 ; encoding: [0xff,0x00,0x84,0xbe,0x00,0x00,0x10,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_load_dword s2, s[2:3], s4 ; encoding: [0x81,0x00,0x00,0xc0,0x04,0x00,0x00,0x00]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v2 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x02,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd5:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x08,0xf4,0x24,0x00,0x00,0xfa]
; GFX10-NEXT:    s_mov_b32 s4, 0x100000 ; encoding: [0xff,0x03,0x84,0xbe,0x00,0x00,0x10,0x00]
; GFX10-NEXT:    v_mov_b32_e32 v0, 0 ; encoding: [0x80,0x02,0x00,0x7e]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_load_dword s2, s[2:3], s4 offset:0x0 ; encoding: [0x81,0x00,0x00,0xf4,0x00,0x00,0x00,0x08]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; GFX10-NEXT:    global_store_dword v0, v1, s[0:1] ; encoding: [0x00,0x80,0x70,0xdc,0x00,0x01,0x00,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %tmp = getelementptr i32, ptr addrspace(4) %ptr, i64 262144
  %tmp1 = load i32, ptr addrspace(4) %tmp
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}

; GFX9+ can use a signed immediate byte offset but not without sgpr[offset]
; GCN-LABEL: {{^}}smrd6:
; SICIVI: s_add_u32 s{{[0-9]}}, s{{[0-9]}}, -4
; SICIVI: s_load_dword s{{[0-9]}}, s{{\[[0-9]+:[0-9]+\]}}, 0x0
; GFX9_10: s_add_u32 s0, s6, -4
; GFX9_10: s_addc_u32 s1, s7, -1
; GFX9_10: s_load_dword s{{[0-9]}}, s{{\[[0-9]+:[0-9]+\]}}, 0x0
define amdgpu_kernel void @smrd6(ptr addrspace(1) %out, ptr addrspace(4) %ptr) #0 {
; SI-LABEL: smrd6:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_add_u32 s2, s2, -4 ; encoding: [0x02,0xc4,0x02,0x80]
; SI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; SI-NEXT:    s_load_dword s4, s[2:3], 0x0 ; encoding: [0x00,0x03,0x02,0xc0]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd6:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_add_u32 s2, s2, -4 ; encoding: [0x02,0xc4,0x02,0x80]
; CI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; CI-NEXT:    s_load_dword s4, s[2:3], 0x0 ; encoding: [0x00,0x03,0x02,0xc0]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd6:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x0a,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_add_u32 s2, s2, -4 ; encoding: [0x02,0xc4,0x02,0x80]
; VI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; VI-NEXT:    s_load_dword s2, s[2:3], 0x0 ; encoding: [0x81,0x00,0x02,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v2 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x02,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd6:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x08,0xf4,0x24,0x00,0x00,0xfa]
; GFX10-NEXT:    v_mov_b32_e32 v0, 0 ; encoding: [0x80,0x02,0x00,0x7e]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_add_u32 s2, s2, -4 ; encoding: [0x02,0xc4,0x02,0x80]
; GFX10-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; GFX10-NEXT:    s_load_dword s2, s[2:3], 0x0 ; encoding: [0x81,0x00,0x00,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; GFX10-NEXT:    global_store_dword v0, v1, s[0:1] ; encoding: [0x00,0x80,0x70,0xdc,0x00,0x01,0x00,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %tmp = getelementptr i32, ptr addrspace(4) %ptr, i64 -1
  %tmp1 = load i32, ptr addrspace(4) %tmp
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}

; Don't use a negative SGPR offset
; GCN-LABEL: {{^}}smrd7:
; GCN: s_add_u32 s{{[0-9]}}, s{{[0-9]}}, 0xffe00000
; SICIVI: s_load_dword s{{[0-9]}}, s{{\[[0-9]+:[0-9]+\]}}, 0x0
; GFX9_10: s_load_dword s{{[0-9]}}, s{{\[[0-9]+:[0-9]+\]}}, 0x0
define amdgpu_kernel void @smrd7(ptr addrspace(1) %out, ptr addrspace(4) %ptr) #0 {
; SI-LABEL: smrd7:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_add_u32 s2, s2, 0xffe00000 ; encoding: [0x02,0xff,0x02,0x80,0x00,0x00,0xe0,0xff]
; SI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; SI-NEXT:    s_load_dword s4, s[2:3], 0x0 ; encoding: [0x00,0x03,0x02,0xc0]
; SI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd7:
; CI:       ; %bb.0: ; %entry
; CI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9 ; encoding: [0x09,0x05,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_add_u32 s2, s2, 0xffe00000 ; encoding: [0x02,0xff,0x02,0x80,0x00,0x00,0xe0,0xff]
; CI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; CI-NEXT:    s_load_dword s4, s[2:3], 0x0 ; encoding: [0x00,0x03,0x02,0xc0]
; CI-NEXT:    s_mov_b32 s3, 0xf000 ; encoding: [0xff,0x03,0x83,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_mov_b32 s2, -1 ; encoding: [0xc1,0x03,0x82,0xbe]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[0:3], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd7:
; VI:       ; %bb.0: ; %entry
; VI-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x0a,0xc0,0x24,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_add_u32 s2, s2, 0xffe00000 ; encoding: [0x02,0xff,0x02,0x80,0x00,0x00,0xe0,0xff]
; VI-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; VI-NEXT:    s_load_dword s2, s[2:3], 0x0 ; encoding: [0x81,0x00,0x02,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v2 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x02,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd7:
; GFX10:       ; %bb.0: ; %entry
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24 ; encoding: [0x02,0x00,0x08,0xf4,0x24,0x00,0x00,0xfa]
; GFX10-NEXT:    v_mov_b32_e32 v0, 0 ; encoding: [0x80,0x02,0x00,0x7e]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_add_u32 s2, s2, 0xffe00000 ; encoding: [0x02,0xff,0x02,0x80,0x00,0x00,0xe0,0xff]
; GFX10-NEXT:    s_addc_u32 s3, s3, -1 ; encoding: [0x03,0xc1,0x03,0x82]
; GFX10-NEXT:    s_load_dword s2, s[2:3], 0x0 ; encoding: [0x81,0x00,0x00,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; GFX10-NEXT:    global_store_dword v0, v1, s[0:1] ; encoding: [0x00,0x80,0x70,0xdc,0x00,0x01,0x00,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
entry:
  %tmp = getelementptr i32, ptr addrspace(4) %ptr, i64 -524288
  %tmp1 = load i32, ptr addrspace(4) %tmp
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}

; GCN-LABEL: {{^}}smrd_hazard:
; GCN-DAG: s_mov_b32 s3, 3
; GCN-DAG: s_mov_b32 s2, 2
; GCN-DAG: s_mov_b32 s1, 1
; GCN-DAG: s_mov_b32 s0, 0
; SI-NEXT: nop 3
; GCN-NEXT: s_buffer_load_dword s0, s[0:3], 0x0
define amdgpu_ps float @smrd_hazard(<4 x i32> inreg %desc) #0 {
; SI-LABEL: smrd_hazard:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s3, 3 ; encoding: [0x83,0x03,0x83,0xbe]
; SI-NEXT:    s_mov_b32 s2, 2 ; encoding: [0x82,0x03,0x82,0xbe]
; SI-NEXT:    s_mov_b32 s1, 1 ; encoding: [0x81,0x03,0x81,0xbe]
; SI-NEXT:    s_mov_b32 s0, 0 ; encoding: [0x80,0x03,0x80,0xbe]
; SI-NEXT:    s_nop 3 ; encoding: [0x03,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x0 ; encoding: [0x00,0x01,0x00,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_hazard:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s3, 3 ; encoding: [0x83,0x03,0x83,0xbe]
; CI-NEXT:    s_mov_b32 s2, 2 ; encoding: [0x82,0x03,0x82,0xbe]
; CI-NEXT:    s_mov_b32 s1, 1 ; encoding: [0x81,0x03,0x81,0xbe]
; CI-NEXT:    s_mov_b32 s0, 0 ; encoding: [0x80,0x03,0x80,0xbe]
; CI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x0 ; encoding: [0x00,0x01,0x00,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_hazard:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s3, 3 ; encoding: [0x83,0x00,0x83,0xbe]
; VI-NEXT:    s_mov_b32 s2, 2 ; encoding: [0x82,0x00,0x82,0xbe]
; VI-NEXT:    s_mov_b32 s1, 1 ; encoding: [0x81,0x00,0x81,0xbe]
; VI-NEXT:    s_mov_b32 s0, 0 ; encoding: [0x80,0x00,0x80,0xbe]
; VI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x0 ; encoding: [0x00,0x00,0x22,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_hazard:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s3, 3 ; encoding: [0x83,0x03,0x83,0xbe]
; GFX10-NEXT:    s_mov_b32 s2, 2 ; encoding: [0x82,0x03,0x82,0xbe]
; GFX10-NEXT:    s_mov_b32 s1, 1 ; encoding: [0x81,0x03,0x81,0xbe]
; GFX10-NEXT:    s_mov_b32 s0, 0 ; encoding: [0x80,0x03,0x80,0xbe]
; GFX10-NEXT:    s_buffer_load_dword s0, s[0:3], 0x0 ; encoding: [0x00,0x00,0x20,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  %d0 = insertelement <4 x i32> undef, i32 0, i32 0
  %d1 = insertelement <4 x i32> %d0, i32 1, i32 1
  %d2 = insertelement <4 x i32> %d1, i32 2, i32 2
  %d3 = insertelement <4 x i32> %d2, i32 3, i32 3
  %r = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %d3, i32 0, i32 0)
  ret float %r
}

; SMRD load using the load.const.v4i32 intrinsic with an immediate offset
; GCN-LABEL: {{^}}smrd_load_const0:
; SICI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x4 ; encoding: [0x04
; VIGFX9_10: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x10
define amdgpu_ps void @smrd_load_const0(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: smrd_load_const0:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x4 ; encoding: [0x04,0x01,0x00,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    exp mrt0 v0, v0, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x00]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_load_const0:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x4 ; encoding: [0x04,0x01,0x00,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    exp mrt0 v0, v0, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x00]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_load_const0:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x10 ; encoding: [0x00,0x00,0x22,0xc0,0x10,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    exp mrt0 v0, v0, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_load_const0:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dword s0, s[0:3], 0x10 ; encoding: [0x00,0x00,0x20,0xf4,0x10,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v0, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp20 = load <4 x i32>, ptr addrspace(4) %arg
  %tmp21 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %tmp20, i32 16, i32 0)
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %tmp21, float %tmp21, float %tmp21, float %tmp21, i1 true, i1 true) #0
  ret void
}

; SMRD load using the load.const.v4i32 intrinsic with the largest possible immediate
; offset.
; GCN-LABEL: {{^}}smrd_load_const1:
; SICI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0xff ; encoding: [0xff
; SICI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0xff glc ; encoding: [0xff
; VIGFX9_10: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]+}}], 0x3fc ;
; VIGFX9_10: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]+}}], 0x3fc glc ;
define amdgpu_ps void @smrd_load_const1(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: smrd_load_const1:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; SI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_buffer_load_dword s0, s[0:3], 0xff ; encoding: [0xff,0x01,0x00,0xc2]
; SI-NEXT:    s_buffer_load_dword s1, s[4:7], 0xff glc ; encoding: [0xff,0x85,0x00,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; SI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_load_const1:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; CI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dword s0, s[0:3], 0xff ; encoding: [0xff,0x01,0x00,0xc2]
; CI-NEXT:    s_buffer_load_dword s1, s[4:7], 0xff glc ; encoding: [0xff,0x85,0x00,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; CI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_load_const1:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x00,0x85,0xbe]
; VI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x00,0x84,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x02,0x01,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x3fc ; encoding: [0x00,0x00,0x22,0xc0,0xfc,0x03,0x00,0x00]
; VI-NEXT:    s_buffer_load_dword s1, s[4:7], 0x3fc glc ; encoding: [0x42,0x00,0x23,0xc0,0xfc,0x03,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x00,0x00,0x01]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_load_const1:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s3, s8 ; encoding: [0x08,0x03,0x83,0xbe]
; GFX10-NEXT:    s_mov_b32 s2, s7 ; encoding: [0x07,0x03,0x82,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x0 ; encoding: [0x00,0x01,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_load_dwordx4 s[8:11], s[2:3], 0x0 ; encoding: [0x01,0x02,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dword s0, s[4:7], 0x3fc ; encoding: [0x02,0x00,0x20,0xf4,0xfc,0x03,0x00,0xfa]
; GFX10-NEXT:    s_buffer_load_dword s1, s[8:11], 0x3fc glc ; encoding: [0x44,0x00,0x21,0xf4,0xfc,0x03,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp20 = load <4 x i32>, ptr addrspace(4) %arg
  %tmp21 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %tmp20, i32 1020, i32 0)
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32> %tmp22, i32 1020, i32 1)
  %s.buffer.float = bitcast i32 %s.buffer to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %tmp21, float %tmp21, float %tmp21, float %s.buffer.float, i1 true, i1 true) #0
  ret void
}

; SMRD load using the load.const.v4i32 intrinsic with an offset greater than the
; largets possible immediate.
; immediate offset.
; GCN-LABEL: {{^}}smrd_load_const2:
; SI: s_movk_i32 s[[OFFSET:[0-9]]], 0x400
; SI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], s[[OFFSET]] ; encoding: [0x0[[OFFSET]]
; SI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], s[[OFFSET]] ; encoding: [0x0[[OFFSET]]
; CI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x100
; CI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x100
; VIGFX9_10: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]+}}], 0x400
; VIGFX9_10: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]+}}], 0x400
define amdgpu_ps void @smrd_load_const2(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: smrd_load_const2:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; SI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; SI-NEXT:    s_movk_i32 s8, 0x400 ; encoding: [0x00,0x04,0x08,0xb0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_nop 2 ; encoding: [0x02,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dword s0, s[0:3], s8 ; encoding: [0x08,0x00,0x00,0xc2]
; SI-NEXT:    s_buffer_load_dword s1, s[4:7], s8 ; encoding: [0x08,0x84,0x00,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; SI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_load_const2:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; CI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x100 ; encoding: [0xff,0x00,0x00,0xc2,0x00,0x01,0x00,0x00]
; CI-NEXT:    s_buffer_load_dword s1, s[4:7], 0x100 ; encoding: [0xff,0x84,0x00,0xc2,0x00,0x01,0x00,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; CI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_load_const2:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x00,0x85,0xbe]
; VI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x00,0x84,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x02,0x01,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x400 ; encoding: [0x00,0x00,0x22,0xc0,0x00,0x04,0x00,0x00]
; VI-NEXT:    s_buffer_load_dword s1, s[4:7], 0x400 ; encoding: [0x42,0x00,0x22,0xc0,0x00,0x04,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x00,0x00,0x01]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_load_const2:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s3, s8 ; encoding: [0x08,0x03,0x83,0xbe]
; GFX10-NEXT:    s_mov_b32 s2, s7 ; encoding: [0x07,0x03,0x82,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x0 ; encoding: [0x00,0x01,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_load_dwordx4 s[8:11], s[2:3], 0x0 ; encoding: [0x01,0x02,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dword s0, s[4:7], 0x400 ; encoding: [0x02,0x00,0x20,0xf4,0x00,0x04,0x00,0xfa]
; GFX10-NEXT:    s_buffer_load_dword s1, s[8:11], 0x400 ; encoding: [0x44,0x00,0x20,0xf4,0x00,0x04,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp20 = load <4 x i32>, ptr addrspace(4) %arg
  %tmp21 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %tmp20, i32 1024, i32 0)
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32> %tmp22, i32 1024, i32 0)
  %s.buffer.float = bitcast i32 %s.buffer to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %tmp21, float %tmp21, float %tmp21, float %s.buffer.float, i1 true, i1 true) #0
  ret void
}

; SMRD load with the largest possible immediate offset on VI
; GCN-LABEL: {{^}}smrd_load_const3:
; SI: s_mov_b32 [[OFFSET:s[0-9]+]], 0xffffc
; SI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], [[OFFSET]]
; SI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], [[OFFSET]]
; CI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x3ffff
; CI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x3ffff
; VIGFX9_10: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]+}}], 0xffffc
; VIGFX9_10: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]+}}], 0xffffc
define amdgpu_ps void @smrd_load_const3(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: smrd_load_const3:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; SI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; SI-NEXT:    s_mov_b32 s8, 0xffffc ; encoding: [0xff,0x03,0x88,0xbe,0xfc,0xff,0x0f,0x00]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_nop 2 ; encoding: [0x02,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dword s0, s[0:3], s8 ; encoding: [0x08,0x00,0x00,0xc2]
; SI-NEXT:    s_buffer_load_dword s1, s[4:7], s8 ; encoding: [0x08,0x84,0x00,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; SI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_load_const3:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; CI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x3ffff ; encoding: [0xff,0x00,0x00,0xc2,0xff,0xff,0x03,0x00]
; CI-NEXT:    s_buffer_load_dword s1, s[4:7], 0x3ffff ; encoding: [0xff,0x84,0x00,0xc2,0xff,0xff,0x03,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; CI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_load_const3:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x00,0x85,0xbe]
; VI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x00,0x84,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x02,0x01,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dword s0, s[0:3], 0xffffc ; encoding: [0x00,0x00,0x22,0xc0,0xfc,0xff,0x0f,0x00]
; VI-NEXT:    s_buffer_load_dword s1, s[4:7], 0xffffc ; encoding: [0x42,0x00,0x22,0xc0,0xfc,0xff,0x0f,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x00,0x00,0x01]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_load_const3:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s3, s8 ; encoding: [0x08,0x03,0x83,0xbe]
; GFX10-NEXT:    s_mov_b32 s2, s7 ; encoding: [0x07,0x03,0x82,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x0 ; encoding: [0x00,0x01,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_load_dwordx4 s[8:11], s[2:3], 0x0 ; encoding: [0x01,0x02,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dword s0, s[4:7], 0xffffc ; encoding: [0x02,0x00,0x20,0xf4,0xfc,0xff,0x0f,0xfa]
; GFX10-NEXT:    s_buffer_load_dword s1, s[8:11], 0xffffc ; encoding: [0x44,0x00,0x20,0xf4,0xfc,0xff,0x0f,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp20 = load <4 x i32>, ptr addrspace(4) %arg
  %tmp21 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %tmp20, i32 1048572, i32 0)
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32> %tmp22, i32 1048572, i32 0)
  %s.buffer.float = bitcast i32 %s.buffer to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %tmp21, float %tmp21, float %tmp21, float %s.buffer.float, i1 true, i1 true) #0
  ret void
}

; SMRD load with an offset greater than the largest possible immediate on VI
; GCN-LABEL: {{^}}smrd_load_const4:
; SIVIGFX9_10: s_mov_b32 [[OFFSET:s[0-9]+]], 0x100000
; SIVIGFX9_10: s_buffer_load_dword s{{[0-9]+}}, s[{{[0-9]:[0-9]+}}], [[OFFSET]]
; SIVIGFX9_10: s_buffer_load_dword s{{[0-9]+}}, s[{{[0-9]:[0-9]+}}], [[OFFSET]]
; CI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x40000
; CI: s_buffer_load_dword s{{[0-9]}}, s[{{[0-9]:[0-9]}}], 0x40000
; GCN: s_endpgm
define amdgpu_ps void @smrd_load_const4(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: smrd_load_const4:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; SI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; SI-NEXT:    s_mov_b32 s8, 0x100000 ; encoding: [0xff,0x03,0x88,0xbe,0x00,0x00,0x10,0x00]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_nop 2 ; encoding: [0x02,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dword s0, s[0:3], s8 ; encoding: [0x08,0x00,0x00,0xc2]
; SI-NEXT:    s_buffer_load_dword s1, s[4:7], s8 ; encoding: [0x08,0x84,0x00,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; SI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_load_const4:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; CI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dword s0, s[0:3], 0x40000 ; encoding: [0xff,0x00,0x00,0xc2,0x00,0x00,0x04,0x00]
; CI-NEXT:    s_buffer_load_dword s1, s[4:7], 0x40000 ; encoding: [0xff,0x84,0x00,0xc2,0x00,0x00,0x04,0x00]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; CI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_load_const4:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x00,0x85,0xbe]
; VI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x00,0x84,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x02,0x01,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_mov_b32 s8, 0x100000 ; encoding: [0xff,0x00,0x88,0xbe,0x00,0x00,0x10,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dword s0, s[0:3], s8 ; encoding: [0x00,0x00,0x20,0xc0,0x08,0x00,0x00,0x00]
; VI-NEXT:    s_buffer_load_dword s1, s[4:7], s8 ; encoding: [0x42,0x00,0x20,0xc0,0x08,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x00,0x00,0x01]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_load_const4:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s3, s8 ; encoding: [0x08,0x03,0x83,0xbe]
; GFX10-NEXT:    s_mov_b32 s2, s7 ; encoding: [0x07,0x03,0x82,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x0 ; encoding: [0x00,0x01,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_load_dwordx4 s[8:11], s[2:3], 0x0 ; encoding: [0x01,0x02,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_mov_b32 s0, 0x100000 ; encoding: [0xff,0x03,0x80,0xbe,0x00,0x00,0x10,0x00]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dword s1, s[4:7], s0 offset:0x0 ; encoding: [0x42,0x00,0x20,0xf4,0x00,0x00,0x00,0x00]
; GFX10-NEXT:    s_buffer_load_dword s2, s[8:11], s0 offset:0x0 ; encoding: [0x84,0x00,0x20,0xf4,0x00,0x00,0x00,0x00]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s1 ; encoding: [0x01,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp20 = load <4 x i32>, ptr addrspace(4) %arg
  %tmp21 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %tmp20, i32 1048576, i32 0)
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32> %tmp22, i32 1048576, i32 0)
  %s.buffer.float = bitcast i32 %s.buffer to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %tmp21, float %tmp21, float %tmp21, float %s.buffer.float, i1 true, i1 true) #0
  ret void
}

; dwordx2 s.buffer.load
; GCN-LABEL: {{^}}s_buffer_load_dwordx2:
; VIGFX9_10: s_buffer_load_dwordx2 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x80
; SICI: s_buffer_load_dwordx2 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x20
define amdgpu_ps void @s_buffer_load_dwordx2(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: s_buffer_load_dwordx2:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; SI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_nop 1 ; encoding: [0x01,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], 0x20 ; encoding: [0x20,0x01,0x40,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; SI-NEXT:    exp mrt0 v0, v1, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x00,0x01]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_dwordx2:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; CI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], 0x20 ; encoding: [0x20,0x01,0x40,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; CI-NEXT:    exp mrt0 v0, v1, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x00,0x01]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_dwordx2:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x00,0x81,0xbe]
; VI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x00,0x80,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], 0x80 ; encoding: [0x00,0x00,0x26,0xc0,0x80,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    exp mrt0 v0, v1, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x01,0x00,0x01]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_dwordx2:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; GFX10-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], 0x80 ; encoding: [0x00,0x00,0x24,0xf4,0x80,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v1, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x00,0x01]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call <2 x i32> @llvm.amdgcn.s.buffer.load.v2i32(<4 x i32> %tmp22, i32 128, i32 0)
  %s.buffer.0 = extractelement <2 x i32> %s.buffer, i32 0
  %s.buffer.0.float = bitcast i32 %s.buffer.0 to float
  %s.buffer.1 = extractelement <2 x i32> %s.buffer, i32 1
  %s.buffer.1.float = bitcast i32 %s.buffer.1 to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %s.buffer.0.float, float %s.buffer.1.float, float %s.buffer.0.float, float %s.buffer.1.float, i1 true, i1 true) #0
  ret void
}

; dwordx4 s.buffer.load
; GCN-LABEL: {{^}}s_buffer_load_dwordx4:
; VIGFX9_10: s_buffer_load_dwordx4 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x80
; SICI: s_buffer_load_dwordx4 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x20
define amdgpu_ps void @s_buffer_load_dwordx4(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: s_buffer_load_dwordx4:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; SI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_nop 1 ; encoding: [0x01,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dwordx4 s[0:3], s[0:3], 0x20 ; encoding: [0x20,0x01,0x80,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; SI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; SI-NEXT:    v_mov_b32_e32 v3, s3 ; encoding: [0x03,0x02,0x06,0x7e]
; SI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_dwordx4:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; CI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dwordx4 s[0:3], s[0:3], 0x20 ; encoding: [0x20,0x01,0x80,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; CI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; CI-NEXT:    v_mov_b32_e32 v3, s3 ; encoding: [0x03,0x02,0x06,0x7e]
; CI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_dwordx4:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x00,0x81,0xbe]
; VI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x00,0x80,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dwordx4 s[0:3], s[0:3], 0x80 ; encoding: [0x00,0x00,0x2a,0xc0,0x80,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; VI-NEXT:    v_mov_b32_e32 v3, s3 ; encoding: [0x03,0x02,0x06,0x7e]
; VI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x01,0x02,0x03]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_dwordx4:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; GFX10-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dwordx4 s[0:3], s[0:3], 0x80 ; encoding: [0x00,0x00,0x28,0xf4,0x80,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v2, s2 ; encoding: [0x02,0x02,0x04,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v3, s3 ; encoding: [0x03,0x02,0x06,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call <4 x i32> @llvm.amdgcn.s.buffer.load.v4i32(<4 x i32> %tmp22, i32 128, i32 0)
  %s.buffer.0 = extractelement <4 x i32> %s.buffer, i32 0
  %s.buffer.0.float = bitcast i32 %s.buffer.0 to float
  %s.buffer.1 = extractelement <4 x i32> %s.buffer, i32 1
  %s.buffer.1.float = bitcast i32 %s.buffer.1 to float
  %s.buffer.2 = extractelement <4 x i32> %s.buffer, i32 2
  %s.buffer.2.float = bitcast i32 %s.buffer.2 to float
  %s.buffer.3 = extractelement <4 x i32> %s.buffer, i32 3
  %s.buffer.3.float = bitcast i32 %s.buffer.3 to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %s.buffer.0.float, float %s.buffer.1.float, float %s.buffer.2.float, float %s.buffer.3.float, i1 true, i1 true) #0
  ret void
}

; dwordx8 s.buffer.load
; GCN-LABEL: {{^}}s_buffer_load_dwordx8:
; VIGFX9_10: s_buffer_load_dwordx8 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x80
; SICI: s_buffer_load_dwordx8 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x20
define amdgpu_ps void @s_buffer_load_dwordx8(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: s_buffer_load_dwordx8:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; SI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_nop 1 ; encoding: [0x01,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], 0x20 ; encoding: [0x20,0x01,0xc0,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; SI-NEXT:    v_mov_b32_e32 v2, s5 ; encoding: [0x05,0x02,0x04,0x7e]
; SI-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; SI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_dwordx8:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; CI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], 0x20 ; encoding: [0x20,0x01,0xc0,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; CI-NEXT:    v_mov_b32_e32 v2, s5 ; encoding: [0x05,0x02,0x04,0x7e]
; CI-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; CI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_dwordx8:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x00,0x81,0xbe]
; VI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x00,0x80,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], 0x80 ; encoding: [0x00,0x00,0x2e,0xc0,0x80,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; VI-NEXT:    v_mov_b32_e32 v2, s5 ; encoding: [0x05,0x02,0x04,0x7e]
; VI-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; VI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x01,0x02,0x03]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_dwordx8:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; GFX10-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], 0x80 ; encoding: [0x00,0x00,0x2c,0xf4,0x80,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v2, s5 ; encoding: [0x05,0x02,0x04,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call <8 x i32> @llvm.amdgcn.s.buffer.load.v8i32(<4 x i32> %tmp22, i32 128, i32 0)
  %s.buffer.0 = extractelement <8 x i32> %s.buffer, i32 0
  %s.buffer.0.float = bitcast i32 %s.buffer.0 to float
  %s.buffer.1 = extractelement <8 x i32> %s.buffer, i32 2
  %s.buffer.1.float = bitcast i32 %s.buffer.1 to float
  %s.buffer.2 = extractelement <8 x i32> %s.buffer, i32 5
  %s.buffer.2.float = bitcast i32 %s.buffer.2 to float
  %s.buffer.3 = extractelement <8 x i32> %s.buffer, i32 7
  %s.buffer.3.float = bitcast i32 %s.buffer.3 to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %s.buffer.0.float, float %s.buffer.1.float, float %s.buffer.2.float, float %s.buffer.3.float, i1 true, i1 true) #0
  ret void
}

; dwordx8 s.buffer.load
; GCN-LABEL: {{^}}s_buffer_load_dwordx8_v8f32:
; VIGFX9_10: s_buffer_load_dwordx8 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x80
; SICI: s_buffer_load_dwordx8 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x20
define amdgpu_ps void @s_buffer_load_dwordx8_v8f32(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: s_buffer_load_dwordx8_v8f32:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; SI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_nop 1 ; encoding: [0x01,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], 0x20 ; encoding: [0x20,0x01,0xc0,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; SI-NEXT:    v_mov_b32_e32 v2, s5 ; encoding: [0x05,0x02,0x04,0x7e]
; SI-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; SI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_dwordx8_v8f32:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; CI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], 0x20 ; encoding: [0x20,0x01,0xc0,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; CI-NEXT:    v_mov_b32_e32 v2, s5 ; encoding: [0x05,0x02,0x04,0x7e]
; CI-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; CI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_dwordx8_v8f32:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x00,0x81,0xbe]
; VI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x00,0x80,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], 0x80 ; encoding: [0x00,0x00,0x2e,0xc0,0x80,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; VI-NEXT:    v_mov_b32_e32 v2, s5 ; encoding: [0x05,0x02,0x04,0x7e]
; VI-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; VI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x01,0x02,0x03]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_dwordx8_v8f32:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; GFX10-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], 0x80 ; encoding: [0x00,0x00,0x2c,0xf4,0x80,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s2 ; encoding: [0x02,0x02,0x02,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v2, s5 ; encoding: [0x05,0x02,0x04,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call <8 x float> @llvm.amdgcn.s.buffer.load.v8f32(<4 x i32> %tmp22, i32 128, i32 0)
  %s.buffer.0 = extractelement <8 x float> %s.buffer, i32 0
  %s.buffer.1 = extractelement <8 x float> %s.buffer, i32 2
  %s.buffer.2 = extractelement <8 x float> %s.buffer, i32 5
  %s.buffer.3 = extractelement <8 x float> %s.buffer, i32 7
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %s.buffer.0, float %s.buffer.1, float %s.buffer.2, float %s.buffer.3, i1 true, i1 true) #0
  ret void
}

; dwordx16 s.buffer.load
; GCN-LABEL: {{^}}s_buffer_load_dwordx16:
; VIGFX9_10: s_buffer_load_dwordx16 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x80
; SICI: s_buffer_load_dwordx16 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x20
define amdgpu_ps void @s_buffer_load_dwordx16(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: s_buffer_load_dwordx16:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; SI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_nop 1 ; encoding: [0x01,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], 0x20 ; encoding: [0x20,0x01,0x00,0xc3]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s3 ; encoding: [0x03,0x02,0x02,0x7e]
; SI-NEXT:    v_mov_b32_e32 v2, s12 ; encoding: [0x0c,0x02,0x04,0x7e]
; SI-NEXT:    v_mov_b32_e32 v3, s15 ; encoding: [0x0f,0x02,0x06,0x7e]
; SI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_dwordx16:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; CI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], 0x20 ; encoding: [0x20,0x01,0x00,0xc3]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s3 ; encoding: [0x03,0x02,0x02,0x7e]
; CI-NEXT:    v_mov_b32_e32 v2, s12 ; encoding: [0x0c,0x02,0x04,0x7e]
; CI-NEXT:    v_mov_b32_e32 v3, s15 ; encoding: [0x0f,0x02,0x06,0x7e]
; CI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_dwordx16:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x00,0x81,0xbe]
; VI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x00,0x80,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], 0x80 ; encoding: [0x00,0x00,0x32,0xc0,0x80,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s3 ; encoding: [0x03,0x02,0x02,0x7e]
; VI-NEXT:    v_mov_b32_e32 v2, s12 ; encoding: [0x0c,0x02,0x04,0x7e]
; VI-NEXT:    v_mov_b32_e32 v3, s15 ; encoding: [0x0f,0x02,0x06,0x7e]
; VI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x01,0x02,0x03]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_dwordx16:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; GFX10-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], 0x80 ; encoding: [0x00,0x00,0x30,0xf4,0x80,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s3 ; encoding: [0x03,0x02,0x02,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v2, s12 ; encoding: [0x0c,0x02,0x04,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v3, s15 ; encoding: [0x0f,0x02,0x06,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call <16 x i32> @llvm.amdgcn.s.buffer.load.v16i32(<4 x i32> %tmp22, i32 128, i32 0)
  %s.buffer.0 = extractelement <16 x i32> %s.buffer, i32 0
  %s.buffer.0.float = bitcast i32 %s.buffer.0 to float
  %s.buffer.1 = extractelement <16 x i32> %s.buffer, i32 3
  %s.buffer.1.float = bitcast i32 %s.buffer.1 to float
  %s.buffer.2 = extractelement <16 x i32> %s.buffer, i32 12
  %s.buffer.2.float = bitcast i32 %s.buffer.2 to float
  %s.buffer.3 = extractelement <16 x i32> %s.buffer, i32 15
  %s.buffer.3.float = bitcast i32 %s.buffer.3 to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %s.buffer.0.float, float %s.buffer.1.float, float %s.buffer.2.float, float %s.buffer.3.float, i1 true, i1 true) #0
  ret void
}

; GCN-LABEL: {{^}}s_buffer_load_dwordx16_v16f32:
; VIGFX9_10: s_buffer_load_dwordx16 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x80
; SICI: s_buffer_load_dwordx16 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]:[0-9]}}], 0x20
define amdgpu_ps void @s_buffer_load_dwordx16_v16f32(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in) #0 {
; SI-LABEL: s_buffer_load_dwordx16_v16f32:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; SI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_nop 1 ; encoding: [0x01,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], 0x20 ; encoding: [0x20,0x01,0x00,0xc3]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s3 ; encoding: [0x03,0x02,0x02,0x7e]
; SI-NEXT:    v_mov_b32_e32 v2, s12 ; encoding: [0x0c,0x02,0x04,0x7e]
; SI-NEXT:    v_mov_b32_e32 v3, s15 ; encoding: [0x0f,0x02,0x06,0x7e]
; SI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_dwordx16_v16f32:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; CI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], 0x20 ; encoding: [0x20,0x01,0x00,0xc3]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s3 ; encoding: [0x03,0x02,0x02,0x7e]
; CI-NEXT:    v_mov_b32_e32 v2, s12 ; encoding: [0x0c,0x02,0x04,0x7e]
; CI-NEXT:    v_mov_b32_e32 v3, s15 ; encoding: [0x0f,0x02,0x06,0x7e]
; CI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_dwordx16_v16f32:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x00,0x81,0xbe]
; VI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x00,0x80,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], 0x80 ; encoding: [0x00,0x00,0x32,0xc0,0x80,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s3 ; encoding: [0x03,0x02,0x02,0x7e]
; VI-NEXT:    v_mov_b32_e32 v2, s12 ; encoding: [0x0c,0x02,0x04,0x7e]
; VI-NEXT:    v_mov_b32_e32 v3, s15 ; encoding: [0x0f,0x02,0x06,0x7e]
; VI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x01,0x02,0x03]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_dwordx16_v16f32:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; GFX10-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], 0x80 ; encoding: [0x00,0x00,0x30,0xf4,0x80,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s3 ; encoding: [0x03,0x02,0x02,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v2, s12 ; encoding: [0x0c,0x02,0x04,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v3, s15 ; encoding: [0x0f,0x02,0x06,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call <16 x float> @llvm.amdgcn.s.buffer.load.v16f32(<4 x i32> %tmp22, i32 128, i32 0)
  %s.buffer.0 = extractelement <16 x float> %s.buffer, i32 0
  %s.buffer.1 = extractelement <16 x float> %s.buffer, i32 3
  %s.buffer.2 = extractelement <16 x float> %s.buffer, i32 12
  %s.buffer.3 = extractelement <16 x float> %s.buffer, i32 15
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %s.buffer.0, float %s.buffer.1, float %s.buffer.2, float %s.buffer.3, i1 true, i1 true) #0
  ret void
}

; GCN-LABEL: {{^}}smrd_sgpr_offset:
; GCN: s_buffer_load_dword s{{[0-9]}}, s[0:3], s4
define amdgpu_ps float @smrd_sgpr_offset(<4 x i32> inreg %desc, i32 inreg %offset) #0 {
; SI-LABEL: smrd_sgpr_offset:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_buffer_load_dword s0, s[0:3], s4 ; encoding: [0x04,0x00,0x00,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_sgpr_offset:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_buffer_load_dword s0, s[0:3], s4 ; encoding: [0x04,0x00,0x00,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_sgpr_offset:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_buffer_load_dword s0, s[0:3], s4 ; encoding: [0x00,0x00,0x20,0xc0,0x04,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_sgpr_offset:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_buffer_load_dword s0, s[0:3], s4 offset:0x0 ; encoding: [0x00,0x00,0x20,0xf4,0x00,0x00,0x00,0x08]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  %r = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %offset, i32 0)
  ret float %r
}

; GCN-LABEL: {{^}}smrd_vgpr_offset:
; GCN: buffer_load_dword v{{[0-9]}}, v0, s[0:3], 0 offen ;
define amdgpu_ps float @smrd_vgpr_offset(<4 x i32> inreg %desc, i32 %offset) #0 {
; SI-LABEL: smrd_vgpr_offset:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_vgpr_offset:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_vgpr_offset:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x50,0xe0,0x00,0x00,0x00,0x80]
; VI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_vgpr_offset:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x00,0x00,0x00,0x80]
; GFX10-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x3f,0x8c,0xbf]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  %r = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %offset, i32 0)
  ret float %r
}

; GCN-LABEL: {{^}}smrd_vgpr_offset_imm:
; GCN-NEXT: %bb.
; GCN-NEXT: buffer_load_dword v{{[0-9]}}, v0, s[0:3], 0 offen offset:4092 ;
define amdgpu_ps float @smrd_vgpr_offset_imm(<4 x i32> inreg %desc, i32 %offset) #0 {
; SI-LABEL: smrd_vgpr_offset_imm:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen offset:4092 ; encoding: [0xfc,0x1f,0x30,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_vgpr_offset_imm:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen offset:4092 ; encoding: [0xfc,0x1f,0x30,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_vgpr_offset_imm:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen offset:4092 ; encoding: [0xfc,0x1f,0x50,0xe0,0x00,0x00,0x00,0x80]
; VI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_vgpr_offset_imm:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen offset:4092 ; encoding: [0xfc,0x1f,0x30,0xe0,0x00,0x00,0x00,0x80]
; GFX10-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x3f,0x8c,0xbf]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  %off = add i32 %offset, 4092
  %r = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %off, i32 0)
  ret float %r
}

; GCN-LABEL: {{^}}smrd_vgpr_offset_imm_too_large:
; GCN-NEXT: %bb.
; SICI-NEXT: v_add_{{i|u}}32_e32 v0, {{(vcc, )?}}0x1000, v0
; SICI-NEXT: buffer_load_dword v{{[0-9]}}, v0, s[0:3], 0 offen ;
; VIGFX9_10-NEXT: buffer_load_dword v{{[0-9]}}, v0, s[0:3], 4 offen offset:4092 ;
define amdgpu_ps float @smrd_vgpr_offset_imm_too_large(<4 x i32> inreg %desc, i32 %offset) #0 {
; SI-LABEL: smrd_vgpr_offset_imm_too_large:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    v_add_i32_e32 v0, vcc, 0x1000, v0 ; encoding: [0xff,0x00,0x00,0x4a,0x00,0x10,0x00,0x00]
; SI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_vgpr_offset_imm_too_large:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    v_add_i32_e32 v0, vcc, 0x1000, v0 ; encoding: [0xff,0x00,0x00,0x4a,0x00,0x10,0x00,0x00]
; CI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_vgpr_offset_imm_too_large:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    buffer_load_dword v0, v0, s[0:3], 4 offen offset:4092 ; encoding: [0xfc,0x1f,0x50,0xe0,0x00,0x00,0x00,0x84]
; VI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_vgpr_offset_imm_too_large:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    buffer_load_dword v0, v0, s[0:3], 4 offen offset:4092 ; encoding: [0xfc,0x1f,0x30,0xe0,0x00,0x00,0x00,0x84]
; GFX10-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x3f,0x8c,0xbf]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  %off = add i32 %offset, 4096
  %r = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %off, i32 0)
  ret float %r
}

; GCN-LABEL: {{^}}smrd_imm_merged:
; GCN-NEXT: %bb.
; SICI-NEXT: s_buffer_load_dwordx4 s[{{[0-9]}}:{{[0-9]}}], s[0:3], 0x1
; SICI-NEXT: s_buffer_load_dwordx2 s[{{[0-9]}}:{{[0-9]}}], s[0:3], 0x7
; GFX10-NEXT: s_clause
; VIGFX9_10-NEXT: s_buffer_load_dwordx4 s[{{[0-9]}}:{{[0-9]}}], s[0:3], 0x4
; VIGFX9_10-NEXT: s_buffer_load_dwordx2 s[{{[0-9]}}:{{[0-9]}}], s[0:3], 0x1c
define amdgpu_ps void @smrd_imm_merged(<4 x i32> inreg %desc) #0 {
; SI-LABEL: smrd_imm_merged:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_buffer_load_dwordx4 s[4:7], s[0:3], 0x1 ; encoding: [0x01,0x01,0x82,0xc2]
; SI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], 0x7 ; encoding: [0x07,0x01,0x40,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s5 ; encoding: [0x05,0x02,0x02,0x7e]
; SI-NEXT:    v_mov_b32_e32 v2, s6 ; encoding: [0x06,0x02,0x04,0x7e]
; SI-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; SI-NEXT:    v_mov_b32_e32 v4, s0 ; encoding: [0x00,0x02,0x08,0x7e]
; SI-NEXT:    v_mov_b32_e32 v5, s1 ; encoding: [0x01,0x02,0x0a,0x7e]
; SI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; SI-NEXT:    exp mrt0 v4, v5, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x04,0x05,0x00,0x00]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_imm_merged:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_buffer_load_dwordx4 s[4:7], s[0:3], 0x1 ; encoding: [0x01,0x01,0x82,0xc2]
; CI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], 0x7 ; encoding: [0x07,0x01,0x40,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s5 ; encoding: [0x05,0x02,0x02,0x7e]
; CI-NEXT:    v_mov_b32_e32 v2, s6 ; encoding: [0x06,0x02,0x04,0x7e]
; CI-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; CI-NEXT:    v_mov_b32_e32 v4, s0 ; encoding: [0x00,0x02,0x08,0x7e]
; CI-NEXT:    v_mov_b32_e32 v5, s1 ; encoding: [0x01,0x02,0x0a,0x7e]
; CI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; CI-NEXT:    exp mrt0 v4, v5, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x04,0x05,0x00,0x00]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_imm_merged:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_buffer_load_dwordx4 s[4:7], s[0:3], 0x4 ; encoding: [0x00,0x01,0x2a,0xc0,0x04,0x00,0x00,0x00]
; VI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], 0x1c ; encoding: [0x00,0x00,0x26,0xc0,0x1c,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s5 ; encoding: [0x05,0x02,0x02,0x7e]
; VI-NEXT:    v_mov_b32_e32 v2, s6 ; encoding: [0x06,0x02,0x04,0x7e]
; VI-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; VI-NEXT:    v_mov_b32_e32 v4, s0 ; encoding: [0x00,0x02,0x08,0x7e]
; VI-NEXT:    v_mov_b32_e32 v5, s1 ; encoding: [0x01,0x02,0x0a,0x7e]
; VI-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x01,0x02,0x03]
; VI-NEXT:    exp mrt0 v4, v5, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x04,0x05,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_imm_merged:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_clause 0x1 ; encoding: [0x01,0x00,0xa1,0xbf]
; GFX10-NEXT:    s_buffer_load_dwordx4 s[4:7], s[0:3], 0x4 ; encoding: [0x00,0x01,0x28,0xf4,0x04,0x00,0x00,0xfa]
; GFX10-NEXT:    s_buffer_load_dwordx2 s[8:9], s[0:3], 0x1c ; encoding: [0x00,0x02,0x24,0xf4,0x1c,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s5 ; encoding: [0x05,0x02,0x02,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v2, s6 ; encoding: [0x06,0x02,0x04,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v4, s8 ; encoding: [0x08,0x02,0x08,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v5, s9 ; encoding: [0x09,0x02,0x0a,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v1, v2, v3 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x01,0x02,0x03]
; GFX10-NEXT:    exp mrt0 v4, v5, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x04,0x05,0x00,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %r1 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 4, i32 0)
  %r2 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 8, i32 0)
  %r3 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 12, i32 0)
  %r4 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 16, i32 0)
  %r5 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 28, i32 0)
  %r6 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 32, i32 0)
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %r1, float %r2, float %r3, float %r4, i1 true, i1 true) #0
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %r5, float %r6, float undef, float undef, i1 true, i1 true) #0
  ret void
}

; GCN-LABEL: {{^}}smrd_imm_merge_m0:
;
; GCN: s_buffer_load_dwordx2
; SICIVI: s_mov_b32 m0
; SICIVI-DAG: v_interp_p1_f32
; SICIVI-DAG: v_interp_p1_f32
; SICIVI-DAG: v_interp_p1_f32
; SICIVI-DAG: v_interp_p2_f32
; SICIVI-DAG: v_interp_p2_f32
; SICIVI-DAG: v_interp_p2_f32
;
; extractelement does not result in movrels anymore for vectors gitting 8 dwords
; SICIVI-NOT: s_mov_b32 m0
; SICIVI-NOT: v_movrels_b32_e32
; v_cndmask_b32_e32
; v_cndmask_b32_e32
;
; Merging is still thwarted on GFX9 due to s_set_gpr_idx
;
define amdgpu_ps float @smrd_imm_merge_m0(<4 x i32> inreg %desc, i32 inreg %prim, float %u, float %v) #0 {
; SI-LABEL: smrd_imm_merge_m0:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], 0x0 ; encoding: [0x00,0x01,0x40,0xc2]
; SI-NEXT:    s_mov_b32 m0, s4 ; encoding: [0x04,0x03,0xfc,0xbe]
; SI-NEXT:    v_interp_p1_f32 v2, v0, attr0.x ; encoding: [0x00,0x00,0x08,0xc8]
; SI-NEXT:    v_interp_p1_f32 v3, v0, attr1.x ; encoding: [0x00,0x04,0x0c,0xc8]
; SI-NEXT:    v_interp_p2_f32 v2, v1, attr0.x ; encoding: [0x01,0x00,0x09,0xc8]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_cmp_eq_u32 s0, 1 ; encoding: [0x00,0x81,0x06,0xbf]
; SI-NEXT:    v_interp_p2_f32 v3, v1, attr1.x ; encoding: [0x01,0x04,0x0d,0xc8]
; SI-NEXT:    v_interp_p1_f32 v0, v0, attr2.x ; encoding: [0x00,0x08,0x00,0xc8]
; SI-NEXT:    s_cselect_b64 vcc, -1, 0 ; encoding: [0xc1,0x80,0xea,0x85]
; SI-NEXT:    s_cmp_eq_u32 s0, 2 ; encoding: [0x00,0x82,0x06,0xbf]
; SI-NEXT:    v_interp_p2_f32 v0, v1, attr2.x ; encoding: [0x01,0x08,0x01,0xc8]
; SI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc ; encoding: [0x02,0x07,0x02,0x00]
; SI-NEXT:    s_cselect_b64 vcc, -1, 0 ; encoding: [0xc1,0x80,0xea,0x85]
; SI-NEXT:    v_cndmask_b32_e32 v0, v1, v0, vcc ; encoding: [0x01,0x01,0x00,0x00]
; SI-NEXT:    v_add_f32_e32 v0, v0, v0 ; encoding: [0x00,0x01,0x00,0x06]
; SI-NEXT:    v_add_f32_e32 v0, s1, v0 ; encoding: [0x01,0x00,0x00,0x06]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_imm_merge_m0:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], 0x0 ; encoding: [0x00,0x01,0x40,0xc2]
; CI-NEXT:    s_mov_b32 m0, s4 ; encoding: [0x04,0x03,0xfc,0xbe]
; CI-NEXT:    v_interp_p1_f32 v2, v0, attr0.x ; encoding: [0x00,0x00,0x08,0xc8]
; CI-NEXT:    v_interp_p1_f32 v3, v0, attr1.x ; encoding: [0x00,0x04,0x0c,0xc8]
; CI-NEXT:    v_interp_p2_f32 v2, v1, attr0.x ; encoding: [0x01,0x00,0x09,0xc8]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_cmp_eq_u32 s0, 1 ; encoding: [0x00,0x81,0x06,0xbf]
; CI-NEXT:    v_interp_p2_f32 v3, v1, attr1.x ; encoding: [0x01,0x04,0x0d,0xc8]
; CI-NEXT:    v_interp_p1_f32 v0, v0, attr2.x ; encoding: [0x00,0x08,0x00,0xc8]
; CI-NEXT:    s_cselect_b64 vcc, -1, 0 ; encoding: [0xc1,0x80,0xea,0x85]
; CI-NEXT:    s_cmp_eq_u32 s0, 2 ; encoding: [0x00,0x82,0x06,0xbf]
; CI-NEXT:    v_interp_p2_f32 v0, v1, attr2.x ; encoding: [0x01,0x08,0x01,0xc8]
; CI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc ; encoding: [0x02,0x07,0x02,0x00]
; CI-NEXT:    s_cselect_b64 vcc, -1, 0 ; encoding: [0xc1,0x80,0xea,0x85]
; CI-NEXT:    v_cndmask_b32_e32 v0, v1, v0, vcc ; encoding: [0x01,0x01,0x00,0x00]
; CI-NEXT:    v_add_f32_e32 v0, v0, v0 ; encoding: [0x00,0x01,0x00,0x06]
; CI-NEXT:    v_add_f32_e32 v0, s1, v0 ; encoding: [0x01,0x00,0x00,0x06]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_imm_merge_m0:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], 0x0 ; encoding: [0x00,0x00,0x26,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_mov_b32 m0, s4 ; encoding: [0x04,0x00,0xfc,0xbe]
; VI-NEXT:    v_interp_p1_f32_e32 v2, v0, attr0.x ; encoding: [0x00,0x00,0x08,0xd4]
; VI-NEXT:    v_interp_p1_f32_e32 v3, v0, attr1.x ; encoding: [0x00,0x04,0x0c,0xd4]
; VI-NEXT:    v_interp_p2_f32_e32 v2, v1, attr0.x ; encoding: [0x01,0x00,0x09,0xd4]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_cmp_eq_u32 s0, 1 ; encoding: [0x00,0x81,0x06,0xbf]
; VI-NEXT:    v_interp_p2_f32_e32 v3, v1, attr1.x ; encoding: [0x01,0x04,0x0d,0xd4]
; VI-NEXT:    v_interp_p1_f32_e32 v0, v0, attr2.x ; encoding: [0x00,0x08,0x00,0xd4]
; VI-NEXT:    s_cselect_b64 vcc, -1, 0 ; encoding: [0xc1,0x80,0xea,0x85]
; VI-NEXT:    s_cmp_eq_u32 s0, 2 ; encoding: [0x00,0x82,0x06,0xbf]
; VI-NEXT:    v_interp_p2_f32_e32 v0, v1, attr2.x ; encoding: [0x01,0x08,0x01,0xd4]
; VI-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc ; encoding: [0x02,0x07,0x02,0x00]
; VI-NEXT:    s_cselect_b64 vcc, -1, 0 ; encoding: [0xc1,0x80,0xea,0x85]
; VI-NEXT:    v_cndmask_b32_e32 v0, v1, v0, vcc ; encoding: [0x01,0x01,0x00,0x00]
; VI-NEXT:    v_add_f32_e32 v0, v0, v0 ; encoding: [0x00,0x01,0x00,0x02]
; VI-NEXT:    v_add_f32_e32 v0, s1, v0 ; encoding: [0x01,0x00,0x00,0x02]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_imm_merge_m0:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 m0, s4 ; encoding: [0x04,0x03,0xfc,0xbe]
; GFX10-NEXT:    s_buffer_load_dwordx2 s[4:5], s[0:3], 0x0 ; encoding: [0x00,0x01,0x24,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    v_interp_p1_f32_e32 v2, v0, attr0.x ; encoding: [0x00,0x00,0x08,0xc8]
; GFX10-NEXT:    v_interp_p1_f32_e32 v3, v0, attr1.x ; encoding: [0x00,0x04,0x0c,0xc8]
; GFX10-NEXT:    v_interp_p1_f32_e32 v0, v0, attr2.x ; encoding: [0x00,0x08,0x00,0xc8]
; GFX10-NEXT:    v_interp_p2_f32_e32 v2, v1, attr0.x ; encoding: [0x01,0x00,0x09,0xc8]
; GFX10-NEXT:    v_interp_p2_f32_e32 v3, v1, attr1.x ; encoding: [0x01,0x04,0x0d,0xc8]
; GFX10-NEXT:    v_interp_p2_f32_e32 v0, v1, attr2.x ; encoding: [0x01,0x08,0x01,0xc8]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_cmp_eq_u32 s4, 1 ; encoding: [0x04,0x81,0x06,0xbf]
; GFX10-NEXT:    s_cselect_b32 vcc_lo, -1, 0 ; encoding: [0xc1,0x80,0x6a,0x85]
; GFX10-NEXT:    s_cmp_eq_u32 s4, 2 ; encoding: [0x04,0x82,0x06,0xbf]
; GFX10-NEXT:    v_cndmask_b32_e32 v1, v2, v3, vcc_lo ; encoding: [0x02,0x07,0x02,0x02]
; GFX10-NEXT:    s_cselect_b32 vcc_lo, -1, 0 ; encoding: [0xc1,0x80,0x6a,0x85]
; GFX10-NEXT:    v_cndmask_b32_e32 v0, v1, v0, vcc_lo ; encoding: [0x01,0x01,0x00,0x02]
; GFX10-NEXT:    v_add_f32_e32 v0, v0, v0 ; encoding: [0x00,0x01,0x00,0x06]
; GFX10-NEXT:    v_add_f32_e32 v0, s5, v0 ; encoding: [0x05,0x00,0x00,0x06]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  %idx1.f = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 0, i32 0)
  %idx1 = bitcast float %idx1.f to i32

  %v0.x1 = call nsz float @llvm.amdgcn.interp.p1(float %u, i32 0, i32 0, i32 %prim)
  %v0.x = call nsz float @llvm.amdgcn.interp.p2(float %v0.x1, float %v, i32 0, i32 0, i32 %prim)
  %v0.y1 = call nsz float @llvm.amdgcn.interp.p1(float %u, i32 0, i32 1, i32 %prim)
  %v0.y = call nsz float @llvm.amdgcn.interp.p2(float %v0.y1, float %v, i32 0, i32 1, i32 %prim)
  %v0.z1 = call nsz float @llvm.amdgcn.interp.p1(float %u, i32 0, i32 2, i32 %prim)
  %v0.z = call nsz float @llvm.amdgcn.interp.p2(float %v0.z1, float %v, i32 0, i32 2, i32 %prim)
  %v0.tmp0 = insertelement <3 x float> undef, float %v0.x, i32 0
  %v0.tmp1 = insertelement <3 x float> %v0.tmp0, float %v0.y, i32 1
  %v0 = insertelement <3 x float> %v0.tmp1, float %v0.z, i32 2
  %a = extractelement <3 x float> %v0, i32 %idx1

  %v1.x1 = call nsz float @llvm.amdgcn.interp.p1(float %u, i32 1, i32 0, i32 %prim)
  %v1.x = call nsz float @llvm.amdgcn.interp.p2(float %v1.x1, float %v, i32 1, i32 0, i32 %prim)
  %v1.y1 = call nsz float @llvm.amdgcn.interp.p1(float %u, i32 1, i32 1, i32 %prim)
  %v1.y = call nsz float @llvm.amdgcn.interp.p2(float %v1.y1, float %v, i32 1, i32 1, i32 %prim)
  %v1.z1 = call nsz float @llvm.amdgcn.interp.p1(float %u, i32 1, i32 2, i32 %prim)
  %v1.z = call nsz float @llvm.amdgcn.interp.p2(float %v1.z1, float %v, i32 1, i32 2, i32 %prim)
  %v1.tmp0 = insertelement <3 x float> undef, float %v0.x, i32 0
  %v1.tmp1 = insertelement <3 x float> %v0.tmp0, float %v0.y, i32 1
  %v1 = insertelement <3 x float> %v0.tmp1, float %v0.z, i32 2

  %b = extractelement <3 x float> %v1, i32 %idx1
  %c = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 4, i32 0)

  %res.tmp = fadd float %a, %b
  %res = fadd float %res.tmp, %c
  ret float %res
}

; GCN-LABEL: {{^}}smrd_vgpr_merged:
; GCN-NEXT: %bb.
; GFX10-NEXT: s_clause
; GCN-NEXT: buffer_load_dwordx4 v[{{[0-9]}}:{{[0-9]}}], v0, s[0:3], 0 offen offset:4
; GCN-NEXT: buffer_load_dwordx2 v[{{[0-9]}}:{{[0-9]}}], v0, s[0:3], 0 offen offset:28
define amdgpu_ps void @smrd_vgpr_merged(<4 x i32> inreg %desc, i32 %a) #0 {
; SI-LABEL: smrd_vgpr_merged:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    buffer_load_dwordx4 v[1:4], v0, s[0:3], 0 offen offset:4 ; encoding: [0x04,0x10,0x38,0xe0,0x00,0x01,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx2 v[5:6], v0, s[0:3], 0 offen offset:28 ; encoding: [0x1c,0x10,0x34,0xe0,0x00,0x05,0x00,0x80]
; SI-NEXT:    s_waitcnt vmcnt(1) ; encoding: [0x71,0x0f,0x8c,0xbf]
; SI-NEXT:    exp mrt0 v1, v2, v3, v4 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x01,0x02,0x03,0x04]
; SI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; SI-NEXT:    exp mrt0 v5, v6, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x05,0x06,0x00,0x00]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_vgpr_merged:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    buffer_load_dwordx4 v[1:4], v0, s[0:3], 0 offen offset:4 ; encoding: [0x04,0x10,0x38,0xe0,0x00,0x01,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx2 v[5:6], v0, s[0:3], 0 offen offset:28 ; encoding: [0x1c,0x10,0x34,0xe0,0x00,0x05,0x00,0x80]
; CI-NEXT:    s_waitcnt vmcnt(1) ; encoding: [0x71,0x0f,0x8c,0xbf]
; CI-NEXT:    exp mrt0 v1, v2, v3, v4 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x01,0x02,0x03,0x04]
; CI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; CI-NEXT:    exp mrt0 v5, v6, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x05,0x06,0x00,0x00]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_vgpr_merged:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    buffer_load_dwordx4 v[1:4], v0, s[0:3], 0 offen offset:4 ; encoding: [0x04,0x10,0x5c,0xe0,0x00,0x01,0x00,0x80]
; VI-NEXT:    buffer_load_dwordx2 v[5:6], v0, s[0:3], 0 offen offset:28 ; encoding: [0x1c,0x10,0x54,0xe0,0x00,0x05,0x00,0x80]
; VI-NEXT:    s_waitcnt vmcnt(1) ; encoding: [0x71,0x0f,0x8c,0xbf]
; VI-NEXT:    exp mrt0 v1, v2, v3, v4 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x01,0x02,0x03,0x04]
; VI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; VI-NEXT:    exp mrt0 v5, v6, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x05,0x06,0x00,0x00]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_vgpr_merged:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_clause 0x1 ; encoding: [0x01,0x00,0xa1,0xbf]
; GFX10-NEXT:    buffer_load_dwordx4 v[1:4], v0, s[0:3], 0 offen offset:4 ; encoding: [0x04,0x10,0x38,0xe0,0x00,0x01,0x00,0x80]
; GFX10-NEXT:    buffer_load_dwordx2 v[5:6], v0, s[0:3], 0 offen offset:28 ; encoding: [0x1c,0x10,0x34,0xe0,0x00,0x05,0x00,0x80]
; GFX10-NEXT:    s_waitcnt vmcnt(1) ; encoding: [0x71,0x3f,0x8c,0xbf]
; GFX10-NEXT:    exp mrt0 v1, v2, v3, v4 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x01,0x02,0x03,0x04]
; GFX10-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x3f,0x8c,0xbf]
; GFX10-NEXT:    exp mrt0 v5, v6, v0, v0 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x05,0x06,0x00,0x00]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %a1 = add i32 %a, 4
  %a2 = add i32 %a, 8
  %a3 = add i32 %a, 12
  %a4 = add i32 %a, 16
  %a5 = add i32 %a, 28
  %a6 = add i32 %a, 32
  %r1 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %a1, i32 0)
  %r2 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %a2, i32 0)
  %r3 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %a3, i32 0)
  %r4 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %a4, i32 0)
  %r5 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %a5, i32 0)
  %r6 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %a6, i32 0)
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %r1, float %r2, float %r3, float %r4, i1 true, i1 true) #0
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %r5, float %r6, float undef, float undef, i1 true, i1 true) #0
  ret void
}

; GCN-LABEL: {{^}}smrd_sgpr_descriptor_promoted
; GCN: v_readfirstlane
define amdgpu_cs void @smrd_sgpr_descriptor_promoted(ptr addrspace(4) inreg noalias dereferenceable(18446744073709551615), i32) #0 {
; SI-LABEL: smrd_sgpr_descriptor_promoted:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    v_cmp_gt_u32_e32 vcc, 10, v0 ; encoding: [0x8a,0x00,0x88,0x7d]
; SI-NEXT:    s_mov_b64 s[12:13], 0 ; encoding: [0x80,0x04,0x8c,0xbe]
; SI-NEXT:    s_mov_b32 s7, 0xf000 ; encoding: [0xff,0x03,0x87,0xbe,0x00,0xf0,0x00,0x00]
; SI-NEXT:    s_mov_b32 s6, -1 ; encoding: [0xc1,0x03,0x86,0xbe]
; SI-NEXT:    s_branch .LBB27_2 ; encoding: [A,A,0x82,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB27_2, kind: fixup_si_sopp_br
; SI-NEXT:  .LBB27_1: ; %Flow3
; SI-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; SI-NEXT:    s_or_b64 exec, exec, s[14:15] ; encoding: [0x7e,0x0e,0xfe,0x88]
; SI-NEXT:    s_and_b64 s[2:3], exec, s[4:5] ; encoding: [0x7e,0x04,0x82,0x87]
; SI-NEXT:    s_or_b64 s[12:13], s[2:3], s[12:13] ; encoding: [0x02,0x0c,0x8c,0x88]
; SI-NEXT:    s_andn2_b64 exec, exec, s[12:13] ; encoding: [0x7e,0x0c,0xfe,0x8a]
; SI-NEXT:    s_cbranch_execz .LBB27_11 ; encoding: [A,A,0x88,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB27_11, kind: fixup_si_sopp_br
; SI-NEXT:  .LBB27_2: ; %.outer_loop_header
; SI-NEXT:    ; =>This Loop Header: Depth=1
; SI-NEXT:    ; Child Loop BB27_5 Depth 2
; SI-NEXT:    ; Child Loop BB27_9 Depth 2
; SI-NEXT:    s_mov_b64 s[4:5], 0 ; encoding: [0x80,0x04,0x84,0xbe]
; SI-NEXT:    s_mov_b32 s18, 0 ; encoding: [0x80,0x03,0x92,0xbe]
; SI-NEXT:    ; implicit-def: $sgpr2_sgpr3
; SI-NEXT:    ; implicit-def: $sgpr14_sgpr15
; SI-NEXT:    s_branch .LBB27_5 ; encoding: [A,A,0x82,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB27_5, kind: fixup_si_sopp_br
; SI-NEXT:  .LBB27_3: ; %.inner_loop_body
; SI-NEXT:    ; in Loop: Header=BB27_5 Depth=2
; SI-NEXT:    s_load_dwordx4 s[8:11], s[0:1], 0x0 ; encoding: [0x00,0x01,0x84,0xc0]
; SI-NEXT:    s_andn2_b64 s[14:15], s[14:15], exec ; encoding: [0x0e,0x7e,0x8e,0x8a]
; SI-NEXT:    s_and_b64 s[20:21], vcc, exec ; encoding: [0x6a,0x7e,0x94,0x87]
; SI-NEXT:    s_mov_b64 s[16:17], 0 ; encoding: [0x80,0x04,0x90,0xbe]
; SI-NEXT:    s_or_b64 s[14:15], s[14:15], s[20:21] ; encoding: [0x0e,0x14,0x8e,0x88]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_buffer_load_dword s19, s[8:11], 0x0 ; encoding: [0x00,0x89,0x09,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s19 ; encoding: [0x13,0x02,0x00,0x7e]
; SI-NEXT:    buffer_store_dword v0, off, s[4:7], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x01,0x80]
; SI-NEXT:  .LBB27_4: ; %Flow
; SI-NEXT:    ; in Loop: Header=BB27_5 Depth=2
; SI-NEXT:    s_xor_b64 s[16:17], s[16:17], -1 ; encoding: [0x10,0xc1,0x90,0x89]
; SI-NEXT:    s_and_b64 s[20:21], exec, s[14:15] ; encoding: [0x7e,0x0e,0x94,0x87]
; SI-NEXT:    s_or_b64 s[4:5], s[20:21], s[4:5] ; encoding: [0x14,0x04,0x84,0x88]
; SI-NEXT:    s_waitcnt expcnt(0) ; encoding: [0x0f,0x0f,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s8 ; encoding: [0x08,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s9 ; encoding: [0x09,0x02,0x02,0x7e]
; SI-NEXT:    v_mov_b32_e32 v2, s10 ; encoding: [0x0a,0x02,0x04,0x7e]
; SI-NEXT:    v_mov_b32_e32 v3, s11 ; encoding: [0x0b,0x02,0x06,0x7e]
; SI-NEXT:    s_andn2_b64 s[2:3], s[2:3], exec ; encoding: [0x02,0x7e,0x82,0x8a]
; SI-NEXT:    s_and_b64 s[8:9], s[16:17], exec ; encoding: [0x10,0x7e,0x88,0x87]
; SI-NEXT:    v_mov_b32_e32 v4, s18 ; encoding: [0x12,0x02,0x08,0x7e]
; SI-NEXT:    s_or_b64 s[2:3], s[2:3], s[8:9] ; encoding: [0x02,0x08,0x82,0x88]
; SI-NEXT:    s_andn2_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x8a]
; SI-NEXT:    s_cbranch_execz .LBB27_7 ; encoding: [A,A,0x88,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB27_7, kind: fixup_si_sopp_br
; SI-NEXT:  .LBB27_5: ; %.inner_loop_header
; SI-NEXT:    ; Parent Loop BB27_2 Depth=1
; SI-NEXT:    ; => This Inner Loop Header: Depth=2
; SI-NEXT:    s_add_i32 s18, s18, 1 ; encoding: [0x12,0x81,0x12,0x81]
; SI-NEXT:    s_or_b64 s[14:15], s[14:15], exec ; encoding: [0x0e,0x7e,0x8e,0x88]
; SI-NEXT:    s_cmp_gt_i32 s18, 9 ; encoding: [0x12,0x89,0x02,0xbf]
; SI-NEXT:    s_mov_b64 s[16:17], -1 ; encoding: [0xc1,0x04,0x90,0xbe]
; SI-NEXT:    s_cbranch_scc0 .LBB27_3 ; encoding: [A,A,0x84,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB27_3, kind: fixup_si_sopp_br
; SI-NEXT:  ; %bb.6: ; in Loop: Header=BB27_5 Depth=2
; SI-NEXT:    ; implicit-def: $sgpr8_sgpr9_sgpr10_sgpr11
; SI-NEXT:    s_branch .LBB27_4 ; encoding: [A,A,0x82,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB27_4, kind: fixup_si_sopp_br
; SI-NEXT:  .LBB27_7: ; %loop.exit.guard
; SI-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; SI-NEXT:    s_or_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x88]
; SI-NEXT:    s_mov_b64 s[4:5], -1 ; encoding: [0xc1,0x04,0x84,0xbe]
; SI-NEXT:    s_and_saveexec_b64 s[8:9], s[2:3] ; encoding: [0x02,0x24,0x88,0xbe]
; SI-NEXT:    s_xor_b64 s[14:15], exec, s[8:9] ; encoding: [0x7e,0x08,0x8e,0x89]
; SI-NEXT:    s_cbranch_execz .LBB27_1 ; encoding: [A,A,0x88,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB27_1, kind: fixup_si_sopp_br
; SI-NEXT:  ; %bb.8: ; %.outer_loop_body
; SI-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; SI-NEXT:    v_lshlrev_b32_e32 v4, 6, v4 ; encoding: [0x86,0x08,0x08,0x34]
; SI-NEXT:    s_mov_b64 s[16:17], exec ; encoding: [0x7e,0x04,0x90,0xbe]
; SI-NEXT:  .LBB27_9: ; Parent Loop BB27_2 Depth=1
; SI-NEXT:    ; => This Inner Loop Header: Depth=2
; SI-NEXT:    v_readfirstlane_b32 s8, v0 ; encoding: [0x00,0x05,0x10,0x7e]
; SI-NEXT:    v_readfirstlane_b32 s9, v1 ; encoding: [0x01,0x05,0x12,0x7e]
; SI-NEXT:    v_readfirstlane_b32 s10, v2 ; encoding: [0x02,0x05,0x14,0x7e]
; SI-NEXT:    v_readfirstlane_b32 s11, v3 ; encoding: [0x03,0x05,0x16,0x7e]
; SI-NEXT:    v_cmp_eq_u64_e64 s[2:3], s[8:9], v[0:1] ; encoding: [0x02,0x00,0xc4,0xd1,0x08,0x00,0x02,0x00]
; SI-NEXT:    v_cmp_eq_u64_e64 s[4:5], s[10:11], v[2:3] ; encoding: [0x04,0x00,0xc4,0xd1,0x0a,0x04,0x02,0x00]
; SI-NEXT:    s_and_b64 s[2:3], s[2:3], s[4:5] ; encoding: [0x02,0x04,0x82,0x87]
; SI-NEXT:    s_and_saveexec_b64 s[2:3], s[2:3] ; encoding: [0x02,0x24,0x82,0xbe]
; SI-NEXT:    buffer_load_dword v5, v4, s[8:11], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x04,0x05,0x02,0x80]
; SI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; SI-NEXT:    ; implicit-def: $vgpr4
; SI-NEXT:    s_xor_b64 exec, exec, s[2:3] ; encoding: [0x7e,0x02,0xfe,0x89]
; SI-NEXT:    s_cbranch_execnz .LBB27_9 ; encoding: [A,A,0x89,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB27_9, kind: fixup_si_sopp_br
; SI-NEXT:  ; %bb.10: ; in Loop: Header=BB27_2 Depth=1
; SI-NEXT:    s_mov_b64 exec, s[16:17] ; encoding: [0x10,0x04,0xfe,0xbe]
; SI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; SI-NEXT:    v_cmp_lg_f32_e64 s[2:3], 0, v5 ; encoding: [0x02,0x00,0x0a,0xd0,0x80,0x0a,0x02,0x00]
; SI-NEXT:    s_orn2_b64 s[4:5], s[2:3], exec ; encoding: [0x02,0x7e,0x84,0x8b]
; SI-NEXT:    s_branch .LBB27_1 ; encoding: [A,A,0x82,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB27_1, kind: fixup_si_sopp_br
; SI-NEXT:  .LBB27_11: ; %ret_block
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_sgpr_descriptor_promoted:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    v_cmp_gt_u32_e32 vcc, 10, v0 ; encoding: [0x8a,0x00,0x88,0x7d]
; CI-NEXT:    s_mov_b64 s[12:13], 0 ; encoding: [0x80,0x04,0x8c,0xbe]
; CI-NEXT:    s_mov_b32 s7, 0xf000 ; encoding: [0xff,0x03,0x87,0xbe,0x00,0xf0,0x00,0x00]
; CI-NEXT:    s_mov_b32 s6, -1 ; encoding: [0xc1,0x03,0x86,0xbe]
; CI-NEXT:    s_branch .LBB27_2 ; encoding: [A,A,0x82,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB27_2, kind: fixup_si_sopp_br
; CI-NEXT:  .LBB27_1: ; %Flow3
; CI-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; CI-NEXT:    s_or_b64 exec, exec, s[14:15] ; encoding: [0x7e,0x0e,0xfe,0x88]
; CI-NEXT:    s_and_b64 s[2:3], exec, s[4:5] ; encoding: [0x7e,0x04,0x82,0x87]
; CI-NEXT:    s_or_b64 s[12:13], s[2:3], s[12:13] ; encoding: [0x02,0x0c,0x8c,0x88]
; CI-NEXT:    s_andn2_b64 exec, exec, s[12:13] ; encoding: [0x7e,0x0c,0xfe,0x8a]
; CI-NEXT:    s_cbranch_execz .LBB27_11 ; encoding: [A,A,0x88,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB27_11, kind: fixup_si_sopp_br
; CI-NEXT:  .LBB27_2: ; %.outer_loop_header
; CI-NEXT:    ; =>This Loop Header: Depth=1
; CI-NEXT:    ; Child Loop BB27_5 Depth 2
; CI-NEXT:    ; Child Loop BB27_9 Depth 2
; CI-NEXT:    s_mov_b64 s[4:5], 0 ; encoding: [0x80,0x04,0x84,0xbe]
; CI-NEXT:    s_mov_b32 s18, 0 ; encoding: [0x80,0x03,0x92,0xbe]
; CI-NEXT:    ; implicit-def: $sgpr2_sgpr3
; CI-NEXT:    ; implicit-def: $sgpr14_sgpr15
; CI-NEXT:    s_branch .LBB27_5 ; encoding: [A,A,0x82,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB27_5, kind: fixup_si_sopp_br
; CI-NEXT:  .LBB27_3: ; %.inner_loop_body
; CI-NEXT:    ; in Loop: Header=BB27_5 Depth=2
; CI-NEXT:    s_load_dwordx4 s[8:11], s[0:1], 0x0 ; encoding: [0x00,0x01,0x84,0xc0]
; CI-NEXT:    s_andn2_b64 s[14:15], s[14:15], exec ; encoding: [0x0e,0x7e,0x8e,0x8a]
; CI-NEXT:    s_and_b64 s[20:21], vcc, exec ; encoding: [0x6a,0x7e,0x94,0x87]
; CI-NEXT:    s_mov_b64 s[16:17], 0 ; encoding: [0x80,0x04,0x90,0xbe]
; CI-NEXT:    s_or_b64 s[14:15], s[14:15], s[20:21] ; encoding: [0x0e,0x14,0x8e,0x88]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dword s19, s[8:11], 0x0 ; encoding: [0x00,0x89,0x09,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s19 ; encoding: [0x13,0x02,0x00,0x7e]
; CI-NEXT:    buffer_store_dword v0, off, s[4:7], 0 ; encoding: [0x00,0x00,0x70,0xe0,0x00,0x00,0x01,0x80]
; CI-NEXT:  .LBB27_4: ; %Flow
; CI-NEXT:    ; in Loop: Header=BB27_5 Depth=2
; CI-NEXT:    s_xor_b64 s[16:17], s[16:17], -1 ; encoding: [0x10,0xc1,0x90,0x89]
; CI-NEXT:    s_and_b64 s[20:21], exec, s[14:15] ; encoding: [0x7e,0x0e,0x94,0x87]
; CI-NEXT:    s_or_b64 s[4:5], s[20:21], s[4:5] ; encoding: [0x14,0x04,0x84,0x88]
; CI-NEXT:    v_mov_b32_e32 v0, s8 ; encoding: [0x08,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s9 ; encoding: [0x09,0x02,0x02,0x7e]
; CI-NEXT:    v_mov_b32_e32 v2, s10 ; encoding: [0x0a,0x02,0x04,0x7e]
; CI-NEXT:    v_mov_b32_e32 v3, s11 ; encoding: [0x0b,0x02,0x06,0x7e]
; CI-NEXT:    s_andn2_b64 s[2:3], s[2:3], exec ; encoding: [0x02,0x7e,0x82,0x8a]
; CI-NEXT:    s_and_b64 s[8:9], s[16:17], exec ; encoding: [0x10,0x7e,0x88,0x87]
; CI-NEXT:    v_mov_b32_e32 v4, s18 ; encoding: [0x12,0x02,0x08,0x7e]
; CI-NEXT:    s_or_b64 s[2:3], s[2:3], s[8:9] ; encoding: [0x02,0x08,0x82,0x88]
; CI-NEXT:    s_andn2_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x8a]
; CI-NEXT:    s_cbranch_execz .LBB27_7 ; encoding: [A,A,0x88,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB27_7, kind: fixup_si_sopp_br
; CI-NEXT:  .LBB27_5: ; %.inner_loop_header
; CI-NEXT:    ; Parent Loop BB27_2 Depth=1
; CI-NEXT:    ; => This Inner Loop Header: Depth=2
; CI-NEXT:    s_add_i32 s18, s18, 1 ; encoding: [0x12,0x81,0x12,0x81]
; CI-NEXT:    s_or_b64 s[14:15], s[14:15], exec ; encoding: [0x0e,0x7e,0x8e,0x88]
; CI-NEXT:    s_cmp_gt_i32 s18, 9 ; encoding: [0x12,0x89,0x02,0xbf]
; CI-NEXT:    s_mov_b64 s[16:17], -1 ; encoding: [0xc1,0x04,0x90,0xbe]
; CI-NEXT:    s_cbranch_scc0 .LBB27_3 ; encoding: [A,A,0x84,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB27_3, kind: fixup_si_sopp_br
; CI-NEXT:  ; %bb.6: ; in Loop: Header=BB27_5 Depth=2
; CI-NEXT:    ; implicit-def: $sgpr8_sgpr9_sgpr10_sgpr11
; CI-NEXT:    s_branch .LBB27_4 ; encoding: [A,A,0x82,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB27_4, kind: fixup_si_sopp_br
; CI-NEXT:  .LBB27_7: ; %loop.exit.guard
; CI-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; CI-NEXT:    s_or_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x88]
; CI-NEXT:    s_mov_b64 s[4:5], -1 ; encoding: [0xc1,0x04,0x84,0xbe]
; CI-NEXT:    s_and_saveexec_b64 s[8:9], s[2:3] ; encoding: [0x02,0x24,0x88,0xbe]
; CI-NEXT:    s_xor_b64 s[14:15], exec, s[8:9] ; encoding: [0x7e,0x08,0x8e,0x89]
; CI-NEXT:    s_cbranch_execz .LBB27_1 ; encoding: [A,A,0x88,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB27_1, kind: fixup_si_sopp_br
; CI-NEXT:  ; %bb.8: ; %.outer_loop_body
; CI-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; CI-NEXT:    v_lshlrev_b32_e32 v4, 6, v4 ; encoding: [0x86,0x08,0x08,0x34]
; CI-NEXT:    s_mov_b64 s[16:17], exec ; encoding: [0x7e,0x04,0x90,0xbe]
; CI-NEXT:  .LBB27_9: ; Parent Loop BB27_2 Depth=1
; CI-NEXT:    ; => This Inner Loop Header: Depth=2
; CI-NEXT:    v_readfirstlane_b32 s8, v0 ; encoding: [0x00,0x05,0x10,0x7e]
; CI-NEXT:    v_readfirstlane_b32 s9, v1 ; encoding: [0x01,0x05,0x12,0x7e]
; CI-NEXT:    v_readfirstlane_b32 s10, v2 ; encoding: [0x02,0x05,0x14,0x7e]
; CI-NEXT:    v_readfirstlane_b32 s11, v3 ; encoding: [0x03,0x05,0x16,0x7e]
; CI-NEXT:    v_cmp_eq_u64_e64 s[2:3], s[8:9], v[0:1] ; encoding: [0x02,0x00,0xc4,0xd1,0x08,0x00,0x02,0x00]
; CI-NEXT:    v_cmp_eq_u64_e64 s[4:5], s[10:11], v[2:3] ; encoding: [0x04,0x00,0xc4,0xd1,0x0a,0x04,0x02,0x00]
; CI-NEXT:    s_and_b64 s[2:3], s[2:3], s[4:5] ; encoding: [0x02,0x04,0x82,0x87]
; CI-NEXT:    s_and_saveexec_b64 s[2:3], s[2:3] ; encoding: [0x02,0x24,0x82,0xbe]
; CI-NEXT:    buffer_load_dword v5, v4, s[8:11], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x04,0x05,0x02,0x80]
; CI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; CI-NEXT:    ; implicit-def: $vgpr4
; CI-NEXT:    s_xor_b64 exec, exec, s[2:3] ; encoding: [0x7e,0x02,0xfe,0x89]
; CI-NEXT:    s_cbranch_execnz .LBB27_9 ; encoding: [A,A,0x89,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB27_9, kind: fixup_si_sopp_br
; CI-NEXT:  ; %bb.10: ; in Loop: Header=BB27_2 Depth=1
; CI-NEXT:    s_mov_b64 exec, s[16:17] ; encoding: [0x10,0x04,0xfe,0xbe]
; CI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; CI-NEXT:    v_cmp_lg_f32_e64 s[2:3], 0, v5 ; encoding: [0x02,0x00,0x0a,0xd0,0x80,0x0a,0x02,0x00]
; CI-NEXT:    s_orn2_b64 s[4:5], s[2:3], exec ; encoding: [0x02,0x7e,0x84,0x8b]
; CI-NEXT:    s_branch .LBB27_1 ; encoding: [A,A,0x82,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB27_1, kind: fixup_si_sopp_br
; CI-NEXT:  .LBB27_11: ; %ret_block
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_sgpr_descriptor_promoted:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    v_cmp_gt_u32_e32 vcc, 10, v0 ; encoding: [0x8a,0x00,0x98,0x7d]
; VI-NEXT:    s_mov_b64 s[12:13], 0 ; encoding: [0x80,0x01,0x8c,0xbe]
; VI-NEXT:    s_branch .LBB27_2 ; encoding: [A,A,0x82,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB27_2, kind: fixup_si_sopp_br
; VI-NEXT:  .LBB27_1: ; %Flow3
; VI-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; VI-NEXT:    s_or_b64 exec, exec, s[6:7] ; encoding: [0x7e,0x06,0xfe,0x87]
; VI-NEXT:    s_and_b64 s[2:3], exec, s[4:5] ; encoding: [0x7e,0x04,0x82,0x86]
; VI-NEXT:    s_or_b64 s[12:13], s[2:3], s[12:13] ; encoding: [0x02,0x0c,0x8c,0x87]
; VI-NEXT:    s_andn2_b64 exec, exec, s[12:13] ; encoding: [0x7e,0x0c,0xfe,0x89]
; VI-NEXT:    s_cbranch_execz .LBB27_11 ; encoding: [A,A,0x88,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB27_11, kind: fixup_si_sopp_br
; VI-NEXT:  .LBB27_2: ; %.outer_loop_header
; VI-NEXT:    ; =>This Loop Header: Depth=1
; VI-NEXT:    ; Child Loop BB27_5 Depth 2
; VI-NEXT:    ; Child Loop BB27_9 Depth 2
; VI-NEXT:    s_mov_b64 s[8:9], 0 ; encoding: [0x80,0x01,0x88,0xbe]
; VI-NEXT:    s_mov_b32 s16, 0 ; encoding: [0x80,0x00,0x90,0xbe]
; VI-NEXT:    ; implicit-def: $sgpr2_sgpr3
; VI-NEXT:    ; implicit-def: $sgpr10_sgpr11
; VI-NEXT:    s_branch .LBB27_5 ; encoding: [A,A,0x82,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB27_5, kind: fixup_si_sopp_br
; VI-NEXT:  .LBB27_3: ; %.inner_loop_body
; VI-NEXT:    ; in Loop: Header=BB27_5 Depth=2
; VI-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x0 ; encoding: [0x00,0x01,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_andn2_b64 s[10:11], s[10:11], exec ; encoding: [0x0a,0x7e,0x8a,0x89]
; VI-NEXT:    s_and_b64 s[18:19], vcc, exec ; encoding: [0x6a,0x7e,0x92,0x86]
; VI-NEXT:    s_mov_b64 s[14:15], 0 ; encoding: [0x80,0x01,0x8e,0xbe]
; VI-NEXT:    s_or_b64 s[10:11], s[10:11], s[18:19] ; encoding: [0x0a,0x12,0x8a,0x87]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dword s17, s[4:7], 0x0 ; encoding: [0x42,0x04,0x22,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s17 ; encoding: [0x11,0x02,0x00,0x7e]
; VI-NEXT:    flat_store_dword v[0:1], v0 ; encoding: [0x00,0x00,0x70,0xdc,0x00,0x00,0x00,0x00]
; VI-NEXT:  .LBB27_4: ; %Flow
; VI-NEXT:    ; in Loop: Header=BB27_5 Depth=2
; VI-NEXT:    s_xor_b64 s[14:15], s[14:15], -1 ; encoding: [0x0e,0xc1,0x8e,0x88]
; VI-NEXT:    s_and_b64 s[18:19], exec, s[10:11] ; encoding: [0x7e,0x0a,0x92,0x86]
; VI-NEXT:    s_or_b64 s[8:9], s[18:19], s[8:9] ; encoding: [0x12,0x08,0x88,0x87]
; VI-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s5 ; encoding: [0x05,0x02,0x02,0x7e]
; VI-NEXT:    v_mov_b32_e32 v2, s6 ; encoding: [0x06,0x02,0x04,0x7e]
; VI-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; VI-NEXT:    s_andn2_b64 s[2:3], s[2:3], exec ; encoding: [0x02,0x7e,0x82,0x89]
; VI-NEXT:    s_and_b64 s[4:5], s[14:15], exec ; encoding: [0x0e,0x7e,0x84,0x86]
; VI-NEXT:    v_mov_b32_e32 v4, s16 ; encoding: [0x10,0x02,0x08,0x7e]
; VI-NEXT:    s_or_b64 s[2:3], s[2:3], s[4:5] ; encoding: [0x02,0x04,0x82,0x87]
; VI-NEXT:    s_andn2_b64 exec, exec, s[8:9] ; encoding: [0x7e,0x08,0xfe,0x89]
; VI-NEXT:    s_cbranch_execz .LBB27_7 ; encoding: [A,A,0x88,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB27_7, kind: fixup_si_sopp_br
; VI-NEXT:  .LBB27_5: ; %.inner_loop_header
; VI-NEXT:    ; Parent Loop BB27_2 Depth=1
; VI-NEXT:    ; => This Inner Loop Header: Depth=2
; VI-NEXT:    s_add_i32 s16, s16, 1 ; encoding: [0x10,0x81,0x10,0x81]
; VI-NEXT:    s_or_b64 s[10:11], s[10:11], exec ; encoding: [0x0a,0x7e,0x8a,0x87]
; VI-NEXT:    s_cmp_gt_i32 s16, 9 ; encoding: [0x10,0x89,0x02,0xbf]
; VI-NEXT:    s_mov_b64 s[14:15], -1 ; encoding: [0xc1,0x01,0x8e,0xbe]
; VI-NEXT:    s_cbranch_scc0 .LBB27_3 ; encoding: [A,A,0x84,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB27_3, kind: fixup_si_sopp_br
; VI-NEXT:  ; %bb.6: ; in Loop: Header=BB27_5 Depth=2
; VI-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; VI-NEXT:    s_branch .LBB27_4 ; encoding: [A,A,0x82,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB27_4, kind: fixup_si_sopp_br
; VI-NEXT:  .LBB27_7: ; %loop.exit.guard
; VI-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; VI-NEXT:    s_or_b64 exec, exec, s[8:9] ; encoding: [0x7e,0x08,0xfe,0x87]
; VI-NEXT:    s_mov_b64 s[4:5], -1 ; encoding: [0xc1,0x01,0x84,0xbe]
; VI-NEXT:    s_and_saveexec_b64 s[6:7], s[2:3] ; encoding: [0x02,0x20,0x86,0xbe]
; VI-NEXT:    s_xor_b64 s[6:7], exec, s[6:7] ; encoding: [0x7e,0x06,0x86,0x88]
; VI-NEXT:    s_cbranch_execz .LBB27_1 ; encoding: [A,A,0x88,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB27_1, kind: fixup_si_sopp_br
; VI-NEXT:  ; %bb.8: ; %.outer_loop_body
; VI-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; VI-NEXT:    v_lshlrev_b32_e32 v4, 6, v4 ; encoding: [0x86,0x08,0x08,0x24]
; VI-NEXT:    s_mov_b64 s[14:15], exec ; encoding: [0x7e,0x01,0x8e,0xbe]
; VI-NEXT:  .LBB27_9: ; Parent Loop BB27_2 Depth=1
; VI-NEXT:    ; => This Inner Loop Header: Depth=2
; VI-NEXT:    v_readfirstlane_b32 s8, v0 ; encoding: [0x00,0x05,0x10,0x7e]
; VI-NEXT:    v_readfirstlane_b32 s9, v1 ; encoding: [0x01,0x05,0x12,0x7e]
; VI-NEXT:    v_readfirstlane_b32 s10, v2 ; encoding: [0x02,0x05,0x14,0x7e]
; VI-NEXT:    v_readfirstlane_b32 s11, v3 ; encoding: [0x03,0x05,0x16,0x7e]
; VI-NEXT:    v_cmp_eq_u64_e64 s[2:3], s[8:9], v[0:1] ; encoding: [0x02,0x00,0xea,0xd0,0x08,0x00,0x02,0x00]
; VI-NEXT:    v_cmp_eq_u64_e64 s[4:5], s[10:11], v[2:3] ; encoding: [0x04,0x00,0xea,0xd0,0x0a,0x04,0x02,0x00]
; VI-NEXT:    s_and_b64 s[2:3], s[2:3], s[4:5] ; encoding: [0x02,0x04,0x82,0x86]
; VI-NEXT:    s_and_saveexec_b64 s[2:3], s[2:3] ; encoding: [0x02,0x20,0x82,0xbe]
; VI-NEXT:    s_nop 0 ; encoding: [0x00,0x00,0x80,0xbf]
; VI-NEXT:    buffer_load_dword v5, v4, s[8:11], 0 offen ; encoding: [0x00,0x10,0x50,0xe0,0x04,0x05,0x02,0x80]
; VI-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; VI-NEXT:    ; implicit-def: $vgpr4
; VI-NEXT:    s_xor_b64 exec, exec, s[2:3] ; encoding: [0x7e,0x02,0xfe,0x88]
; VI-NEXT:    s_cbranch_execnz .LBB27_9 ; encoding: [A,A,0x89,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB27_9, kind: fixup_si_sopp_br
; VI-NEXT:  ; %bb.10: ; in Loop: Header=BB27_2 Depth=1
; VI-NEXT:    s_mov_b64 exec, s[14:15] ; encoding: [0x0e,0x01,0xfe,0xbe]
; VI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; VI-NEXT:    v_cmp_lg_f32_e64 s[2:3], 0, v5 ; encoding: [0x02,0x00,0x45,0xd0,0x80,0x0a,0x02,0x00]
; VI-NEXT:    s_orn2_b64 s[4:5], s[2:3], exec ; encoding: [0x02,0x7e,0x84,0x8a]
; VI-NEXT:    s_branch .LBB27_1 ; encoding: [A,A,0x82,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB27_1, kind: fixup_si_sopp_br
; VI-NEXT:  .LBB27_11: ; %ret_block
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_sgpr_descriptor_promoted:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    v_cmp_gt_u32_e32 vcc_lo, 10, v0 ; encoding: [0x8a,0x00,0x88,0x7d]
; GFX10-NEXT:    s_mov_b32 s8, 0 ; encoding: [0x80,0x03,0x88,0xbe]
; GFX10-NEXT:    s_branch .LBB27_2 ; encoding: [A,A,0x82,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB27_2, kind: fixup_si_sopp_br
; GFX10-NEXT:  .LBB27_1: ; %Flow3
; GFX10-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; GFX10-NEXT:    s_or_b32 exec_lo, exec_lo, s9 ; encoding: [0x7e,0x09,0x7e,0x88]
; GFX10-NEXT:    s_and_b32 s2, exec_lo, s3 ; encoding: [0x7e,0x03,0x02,0x87]
; GFX10-NEXT:    s_or_b32 s8, s2, s8 ; encoding: [0x02,0x08,0x08,0x88]
; GFX10-NEXT:    s_andn2_b32 exec_lo, exec_lo, s8 ; encoding: [0x7e,0x08,0x7e,0x8a]
; GFX10-NEXT:    s_cbranch_execz .LBB27_11 ; encoding: [A,A,0x88,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB27_11, kind: fixup_si_sopp_br
; GFX10-NEXT:  .LBB27_2: ; %.outer_loop_header
; GFX10-NEXT:    ; =>This Loop Header: Depth=1
; GFX10-NEXT:    ; Child Loop BB27_5 Depth 2
; GFX10-NEXT:    ; Child Loop BB27_9 Depth 2
; GFX10-NEXT:    s_mov_b32 s3, 0 ; encoding: [0x80,0x03,0x83,0xbe]
; GFX10-NEXT:    s_mov_b32 s9, 0 ; encoding: [0x80,0x03,0x89,0xbe]
; GFX10-NEXT:    ; implicit-def: $sgpr2
; GFX10-NEXT:    ; implicit-def: $sgpr10
; GFX10-NEXT:    s_branch .LBB27_5 ; encoding: [A,A,0x82,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB27_5, kind: fixup_si_sopp_br
; GFX10-NEXT:  .LBB27_3: ; %.inner_loop_body
; GFX10-NEXT:    ; in Loop: Header=BB27_5 Depth=2
; GFX10-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x0 ; encoding: [0x00,0x01,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_andn2_b32 s10, s10, exec_lo ; encoding: [0x0a,0x7e,0x0a,0x8a]
; GFX10-NEXT:    s_and_b32 s12, vcc_lo, exec_lo ; encoding: [0x6a,0x7e,0x0c,0x87]
; GFX10-NEXT:    s_or_b32 s10, s10, s12 ; encoding: [0x0a,0x0c,0x0a,0x88]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dword s11, s[4:7], 0x0 ; encoding: [0xc2,0x02,0x20,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s11 ; encoding: [0x0b,0x02,0x00,0x7e]
; GFX10-NEXT:    s_mov_b32 s11, 0 ; encoding: [0x80,0x03,0x8b,0xbe]
; GFX10-NEXT:    global_store_dword v[0:1], v0, off ; encoding: [0x00,0x80,0x70,0xdc,0x00,0x00,0x7d,0x00]
; GFX10-NEXT:  .LBB27_4: ; %Flow
; GFX10-NEXT:    ; in Loop: Header=BB27_5 Depth=2
; GFX10-NEXT:    s_xor_b32 s11, s11, -1 ; encoding: [0x0b,0xc1,0x0b,0x89]
; GFX10-NEXT:    s_and_b32 s12, exec_lo, s10 ; encoding: [0x7e,0x0a,0x0c,0x87]
; GFX10-NEXT:    v_mov_b32_e32 v0, s4 ; encoding: [0x04,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s5 ; encoding: [0x05,0x02,0x02,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v2, s6 ; encoding: [0x06,0x02,0x04,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v3, s7 ; encoding: [0x07,0x02,0x06,0x7e]
; GFX10-NEXT:    s_or_b32 s3, s12, s3 ; encoding: [0x0c,0x03,0x03,0x88]
; GFX10-NEXT:    v_mov_b32_e32 v4, s9 ; encoding: [0x09,0x02,0x08,0x7e]
; GFX10-NEXT:    s_andn2_b32 s2, s2, exec_lo ; encoding: [0x02,0x7e,0x02,0x8a]
; GFX10-NEXT:    s_and_b32 s4, s11, exec_lo ; encoding: [0x0b,0x7e,0x04,0x87]
; GFX10-NEXT:    s_or_b32 s2, s2, s4 ; encoding: [0x02,0x04,0x02,0x88]
; GFX10-NEXT:    s_andn2_b32 exec_lo, exec_lo, s3 ; encoding: [0x7e,0x03,0x7e,0x8a]
; GFX10-NEXT:    s_cbranch_execz .LBB27_7 ; encoding: [A,A,0x88,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB27_7, kind: fixup_si_sopp_br
; GFX10-NEXT:  .LBB27_5: ; %.inner_loop_header
; GFX10-NEXT:    ; Parent Loop BB27_2 Depth=1
; GFX10-NEXT:    ; => This Inner Loop Header: Depth=2
; GFX10-NEXT:    s_add_i32 s9, s9, 1 ; encoding: [0x09,0x81,0x09,0x81]
; GFX10-NEXT:    s_or_b32 s10, s10, exec_lo ; encoding: [0x0a,0x7e,0x0a,0x88]
; GFX10-NEXT:    s_cmp_gt_i32 s9, 9 ; encoding: [0x09,0x89,0x02,0xbf]
; GFX10-NEXT:    s_mov_b32 s11, -1 ; encoding: [0xc1,0x03,0x8b,0xbe]
; GFX10-NEXT:    s_cbranch_scc0 .LBB27_3 ; encoding: [A,A,0x84,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB27_3, kind: fixup_si_sopp_br
; GFX10-NEXT:  ; %bb.6: ; in Loop: Header=BB27_5 Depth=2
; GFX10-NEXT:    ; implicit-def: $sgpr4_sgpr5_sgpr6_sgpr7
; GFX10-NEXT:    s_branch .LBB27_4 ; encoding: [A,A,0x82,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB27_4, kind: fixup_si_sopp_br
; GFX10-NEXT:  .LBB27_7: ; %loop.exit.guard
; GFX10-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; GFX10-NEXT:    s_or_b32 exec_lo, exec_lo, s3 ; encoding: [0x7e,0x03,0x7e,0x88]
; GFX10-NEXT:    s_mov_b32 s3, -1 ; encoding: [0xc1,0x03,0x83,0xbe]
; GFX10-NEXT:    s_and_saveexec_b32 s4, s2 ; encoding: [0x02,0x3c,0x84,0xbe]
; GFX10-NEXT:    s_xor_b32 s9, exec_lo, s4 ; encoding: [0x7e,0x04,0x09,0x89]
; GFX10-NEXT:    s_cbranch_execz .LBB27_1 ; encoding: [A,A,0x88,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB27_1, kind: fixup_si_sopp_br
; GFX10-NEXT:  ; %bb.8: ; %.outer_loop_body
; GFX10-NEXT:    ; in Loop: Header=BB27_2 Depth=1
; GFX10-NEXT:    v_lshlrev_b32_e32 v4, 6, v4 ; encoding: [0x86,0x08,0x08,0x34]
; GFX10-NEXT:    s_mov_b32 s10, exec_lo ; encoding: [0x7e,0x03,0x8a,0xbe]
; GFX10-NEXT:  .LBB27_9: ; Parent Loop BB27_2 Depth=1
; GFX10-NEXT:    ; => This Inner Loop Header: Depth=2
; GFX10-NEXT:    v_readfirstlane_b32 s4, v0 ; encoding: [0x00,0x05,0x08,0x7e]
; GFX10-NEXT:    v_readfirstlane_b32 s5, v1 ; encoding: [0x01,0x05,0x0a,0x7e]
; GFX10-NEXT:    v_readfirstlane_b32 s6, v2 ; encoding: [0x02,0x05,0x0c,0x7e]
; GFX10-NEXT:    v_readfirstlane_b32 s7, v3 ; encoding: [0x03,0x05,0x0e,0x7e]
; GFX10-NEXT:    v_cmp_eq_u64_e64 s2, s[4:5], v[0:1] ; encoding: [0x02,0x00,0xe2,0xd4,0x04,0x00,0x02,0x00]
; GFX10-NEXT:    v_cmp_eq_u64_e64 s3, s[6:7], v[2:3] ; encoding: [0x03,0x00,0xe2,0xd4,0x06,0x04,0x02,0x00]
; GFX10-NEXT:    s_and_b32 s2, s2, s3 ; encoding: [0x02,0x03,0x02,0x87]
; GFX10-NEXT:    s_and_saveexec_b32 s2, s2 ; encoding: [0x02,0x3c,0x82,0xbe]
; GFX10-NEXT:    buffer_load_dword v5, v4, s[4:7], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x04,0x05,0x01,0x80]
; GFX10-NEXT:    ; implicit-def: $vgpr0_vgpr1_vgpr2_vgpr3
; GFX10-NEXT:    ; implicit-def: $vgpr4
; GFX10-NEXT:    s_waitcnt_depctr 0xffe3 ; encoding: [0xe3,0xff,0xa3,0xbf]
; GFX10-NEXT:    s_xor_b32 exec_lo, exec_lo, s2 ; encoding: [0x7e,0x02,0x7e,0x89]
; GFX10-NEXT:    s_cbranch_execnz .LBB27_9 ; encoding: [A,A,0x89,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB27_9, kind: fixup_si_sopp_br
; GFX10-NEXT:  ; %bb.10: ; in Loop: Header=BB27_2 Depth=1
; GFX10-NEXT:    s_mov_b32 exec_lo, s10 ; encoding: [0x0a,0x03,0xfe,0xbe]
; GFX10-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x3f,0x8c,0xbf]
; GFX10-NEXT:    v_cmp_lg_f32_e64 s2, 0, v5 ; encoding: [0x02,0x00,0x05,0xd4,0x80,0x0a,0x02,0x00]
; GFX10-NEXT:    s_orn2_b32 s3, s2, exec_lo ; encoding: [0x02,0x7e,0x03,0x8b]
; GFX10-NEXT:    s_branch .LBB27_1 ; encoding: [A,A,0x82,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB27_1, kind: fixup_si_sopp_br
; GFX10-NEXT:  .LBB27_11: ; %ret_block
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  br label %.outer_loop_header

ret_block:                                       ; preds = %.outer, %.label22, %main_body
  ret void

.outer_loop_header:
  br label %.inner_loop_header

.inner_loop_header:                                     ; preds = %.inner_loop_body, %.outer_loop_header
  %loopctr.1 = phi i32 [ 0, %.outer_loop_header ], [ %loopctr.2, %.inner_loop_body ]
  %loopctr.2 = add i32 %loopctr.1, 1
  %inner_br1 = icmp slt i32 %loopctr.2, 10
  br i1 %inner_br1, label %.inner_loop_body, label %ret_block

.inner_loop_body:
  %descriptor = load <4 x i32>, ptr addrspace(4) %0, align 16, !invariant.load !0
  %load1result = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %descriptor, i32 0, i32 0)
  store float %load1result, ptr addrspace(1) undef
  %inner_br2 = icmp uge i32 %1, 10
  br i1 %inner_br2, label %.inner_loop_header, label %.outer_loop_body

.outer_loop_body:
  %offset = shl i32 %loopctr.2, 6
  %load2result = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %descriptor, i32 %offset, i32 0)
  %outer_br = fcmp ueq float %load2result, 0x0
  br i1 %outer_br, label %.outer_loop_header, label %ret_block
}

; SMRD load with a non-const offset
; GCN-LABEL: {{^}}smrd_load_nonconst0:
; SIVIGFX9_10: s_buffer_load_dword s{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], s{{[0-9]+}}
; SIVIGFX9_10: s_buffer_load_dword s{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], s{{[0-9]+}}
; CI: s_buffer_load_dword s{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], s{{[0-9]+}}
; CI: s_buffer_load_dword s{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], s{{[0-9]+}}
; GCN: s_endpgm
define amdgpu_ps void @smrd_load_nonconst0(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in, i32 inreg %ncoff) #0 {
; SI-LABEL: smrd_load_nonconst0:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; SI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_buffer_load_dword s0, s[0:3], s9 ; encoding: [0x09,0x00,0x00,0xc2]
; SI-NEXT:    s_buffer_load_dword s1, s[4:7], s9 ; encoding: [0x09,0x84,0x00,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; SI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_load_nonconst0:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; CI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dword s0, s[0:3], s9 ; encoding: [0x09,0x00,0x00,0xc2]
; CI-NEXT:    s_buffer_load_dword s1, s[4:7], s9 ; encoding: [0x09,0x84,0x00,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; CI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_load_nonconst0:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x00,0x85,0xbe]
; VI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x00,0x84,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x02,0x01,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dword s0, s[0:3], s9 ; encoding: [0x00,0x00,0x20,0xc0,0x09,0x00,0x00,0x00]
; VI-NEXT:    s_buffer_load_dword s1, s[4:7], s9 ; encoding: [0x42,0x00,0x20,0xc0,0x09,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x00,0x00,0x01]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_load_nonconst0:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s3, s8 ; encoding: [0x08,0x03,0x83,0xbe]
; GFX10-NEXT:    s_mov_b32 s2, s7 ; encoding: [0x07,0x03,0x82,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x0 ; encoding: [0x00,0x01,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_load_dwordx4 s[12:15], s[2:3], 0x0 ; encoding: [0x01,0x03,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dword s0, s[4:7], s9 offset:0x0 ; encoding: [0x02,0x00,0x20,0xf4,0x00,0x00,0x00,0x12]
; GFX10-NEXT:    s_buffer_load_dword s1, s[12:15], s9 offset:0x0 ; encoding: [0x46,0x00,0x20,0xf4,0x00,0x00,0x00,0x12]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp20 = load <4 x i32>, ptr addrspace(4) %arg
  %tmp21 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %tmp20, i32 %ncoff, i32 0)
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32> %tmp22, i32 %ncoff, i32 0)
  %s.buffer.float = bitcast i32 %s.buffer to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %tmp21, float %tmp21, float %tmp21, float %s.buffer.float, i1 true, i1 true) #0
  ret void
}

; SMRD load with a non-const non-uniform offset
; GCN-LABEL: {{^}}smrd_load_nonconst1:
; SIVIGFX9_10: buffer_load_dword v{{[0-9]+}}, v{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], 0 offen
; SIVIGFX9_10: buffer_load_dword v{{[0-9]+}}, v{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], 0 offen
; CI: buffer_load_dword v{{[0-9]+}}, v{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], 0 offen
; CI: buffer_load_dword v{{[0-9]+}}, v{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], 0 offen
; GCN: s_endpgm
define amdgpu_ps void @smrd_load_nonconst1(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in, i32 %ncoff) #0 {
; SI-LABEL: smrd_load_nonconst1:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; SI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    buffer_load_dword v0, v2, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x02,0x00,0x00,0x80]
; SI-NEXT:    buffer_load_dword v1, v2, s[4:7], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x02,0x01,0x01,0x80]
; SI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; SI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_load_nonconst1:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; CI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    buffer_load_dword v0, v2, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x02,0x00,0x00,0x80]
; CI-NEXT:    buffer_load_dword v1, v2, s[4:7], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x02,0x01,0x01,0x80]
; CI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; CI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_load_nonconst1:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x00,0x85,0xbe]
; VI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x00,0x84,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x02,0x01,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    buffer_load_dword v0, v2, s[0:3], 0 offen ; encoding: [0x00,0x10,0x50,0xe0,0x02,0x00,0x00,0x80]
; VI-NEXT:    buffer_load_dword v1, v2, s[4:7], 0 offen ; encoding: [0x00,0x10,0x50,0xe0,0x02,0x01,0x01,0x80]
; VI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; VI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x00,0x00,0x01]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_load_nonconst1:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s3, s8 ; encoding: [0x08,0x03,0x83,0xbe]
; GFX10-NEXT:    s_mov_b32 s2, s7 ; encoding: [0x07,0x03,0x82,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x0 ; encoding: [0x00,0x01,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_load_dwordx4 s[8:11], s[2:3], 0x0 ; encoding: [0x01,0x02,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    buffer_load_dword v0, v2, s[4:7], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x02,0x00,0x01,0x80]
; GFX10-NEXT:    buffer_load_dword v1, v2, s[8:11], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x02,0x01,0x02,0x80]
; GFX10-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x3f,0x8c,0xbf]
; GFX10-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp20 = load <4 x i32>, ptr addrspace(4) %arg
  %tmp21 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %tmp20, i32 %ncoff, i32 0)
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32> %tmp22, i32 %ncoff, i32 0)
  %s.buffer.float = bitcast i32 %s.buffer to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %tmp21, float %tmp21, float %tmp21, float %s.buffer.float, i1 true, i1 true) #0
  ret void
}

; SMRD load with a non-const non-uniform offset of > 4 dwords (requires splitting)
; GCN-LABEL: {{^}}smrd_load_nonconst2:
; SIVIGFX9_10-DAG: buffer_load_dword v{{[0-9]+}}, v{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], 0 offen
; SIVIGFX9_10-DAG: buffer_load_dwordx4 v[{{[0-9]+:[0-9]+}}], v{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], 0 offen
; CI: buffer_load_dword v{{[0-9]+}}, v{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], 0 offen
; CI: buffer_load_dwordx4 v[{{[0-9]+:[0-9]+}}], v{{[0-9]+}}, s[{{[0-9]+:[0-9]+}}], 0 offen
; GCN: s_endpgm
define amdgpu_ps void @smrd_load_nonconst2(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in, i32 %ncoff) #0 {
; SI-LABEL: smrd_load_nonconst2:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; SI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    buffer_load_dword v4, v2, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x02,0x04,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx4 v[0:3], v2, s[4:7], 0 offen ; encoding: [0x00,0x10,0x38,0xe0,0x02,0x00,0x01,0x80]
; SI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; SI-NEXT:    exp mrt0 v4, v4, v4, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x04,0x04,0x04,0x01]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_load_nonconst2:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x03,0x85,0xbe]
; CI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x03,0x84,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x00,0x05,0x82,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    buffer_load_dword v4, v2, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x02,0x04,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx4 v[0:3], v2, s[4:7], 0 offen ; encoding: [0x00,0x10,0x38,0xe0,0x02,0x00,0x01,0x80]
; CI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; CI-NEXT:    exp mrt0 v4, v4, v4, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x04,0x04,0x04,0x01]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_load_nonconst2:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s5, s8 ; encoding: [0x08,0x00,0x85,0xbe]
; VI-NEXT:    s_mov_b32 s4, s7 ; encoding: [0x07,0x00,0x84,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x0 ; encoding: [0x02,0x01,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    buffer_load_dword v4, v2, s[0:3], 0 offen ; encoding: [0x00,0x10,0x50,0xe0,0x02,0x04,0x00,0x80]
; VI-NEXT:    buffer_load_dwordx4 v[0:3], v2, s[4:7], 0 offen ; encoding: [0x00,0x10,0x5c,0xe0,0x02,0x00,0x01,0x80]
; VI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; VI-NEXT:    exp mrt0 v4, v4, v4, v1 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x04,0x04,0x04,0x01]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_load_nonconst2:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s3, s8 ; encoding: [0x08,0x03,0x83,0xbe]
; GFX10-NEXT:    s_mov_b32 s2, s7 ; encoding: [0x07,0x03,0x82,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x0 ; encoding: [0x00,0x01,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_load_dwordx4 s[8:11], s[2:3], 0x0 ; encoding: [0x01,0x02,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    buffer_load_dword v0, v2, s[4:7], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x02,0x00,0x01,0x80]
; GFX10-NEXT:    buffer_load_dwordx4 v[3:6], v2, s[8:11], 0 offen ; encoding: [0x00,0x10,0x38,0xe0,0x02,0x03,0x02,0x80]
; GFX10-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x3f,0x8c,0xbf]
; GFX10-NEXT:    exp mrt0 v0, v0, v0, v4 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x04]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp20 = load <4 x i32>, ptr addrspace(4) %arg
  %tmp21 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %tmp20, i32 %ncoff, i32 0)
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call <8 x i32> @llvm.amdgcn.s.buffer.load.v8i32(<4 x i32> %tmp22, i32 %ncoff, i32 0)
  %s.buffer.elt = extractelement <8 x i32> %s.buffer, i32 1
  %s.buffer.float = bitcast i32 %s.buffer.elt to float
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %tmp21, float %tmp21, float %tmp21, float %s.buffer.float, i1 true, i1 true) #0
  ret void
}

; SMRD load with a non-const non-uniform offset of > 4 dwords (requires splitting)
; GCN-LABEL: {{^}}smrd_load_nonconst3:
; GCN-DAG: buffer_load_dwordx4 v[0:3], v{{[0-9]+}}, s[0:3], 0 offen ;
; GCN-DAG: buffer_load_dwordx4 v[4:7], v{{[0-9]+}}, s[0:3], 0 offen offset:16 ;
; GCN-DAG: buffer_load_dwordx4 v[8:11], v{{[0-9]+}}, s[0:3], 0 offen offset:32 ;
; GCN-DAG: buffer_load_dwordx4 v[12:15], v{{[0-9]+}}, s[0:3], 0 offen offset:48 ;
; GCN: ; return to shader part epilog
define amdgpu_ps <16 x float> @smrd_load_nonconst3(<4 x i32> inreg %rsrc, i32 %off) #0 {
; SI-LABEL: smrd_load_nonconst3:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    v_mov_b32_e32 v12, v0 ; encoding: [0x00,0x03,0x18,0x7e]
; SI-NEXT:    buffer_load_dwordx4 v[0:3], v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x38,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx4 v[4:7], v12, s[0:3], 0 offen offset:16 ; encoding: [0x10,0x10,0x38,0xe0,0x0c,0x04,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx4 v[8:11], v12, s[0:3], 0 offen offset:32 ; encoding: [0x20,0x10,0x38,0xe0,0x0c,0x08,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx4 v[12:15], v12, s[0:3], 0 offen offset:48 ; encoding: [0x30,0x10,0x38,0xe0,0x0c,0x0c,0x00,0x80]
; SI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_load_nonconst3:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    v_mov_b32_e32 v12, v0 ; encoding: [0x00,0x03,0x18,0x7e]
; CI-NEXT:    buffer_load_dwordx4 v[0:3], v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x38,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx4 v[4:7], v12, s[0:3], 0 offen offset:16 ; encoding: [0x10,0x10,0x38,0xe0,0x0c,0x04,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx4 v[8:11], v12, s[0:3], 0 offen offset:32 ; encoding: [0x20,0x10,0x38,0xe0,0x0c,0x08,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx4 v[12:15], v12, s[0:3], 0 offen offset:48 ; encoding: [0x30,0x10,0x38,0xe0,0x0c,0x0c,0x00,0x80]
; CI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_load_nonconst3:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    v_mov_b32_e32 v12, v0 ; encoding: [0x00,0x03,0x18,0x7e]
; VI-NEXT:    buffer_load_dwordx4 v[0:3], v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x5c,0xe0,0x00,0x00,0x00,0x80]
; VI-NEXT:    buffer_load_dwordx4 v[4:7], v12, s[0:3], 0 offen offset:16 ; encoding: [0x10,0x10,0x5c,0xe0,0x0c,0x04,0x00,0x80]
; VI-NEXT:    buffer_load_dwordx4 v[8:11], v12, s[0:3], 0 offen offset:32 ; encoding: [0x20,0x10,0x5c,0xe0,0x0c,0x08,0x00,0x80]
; VI-NEXT:    buffer_load_dwordx4 v[12:15], v12, s[0:3], 0 offen offset:48 ; encoding: [0x30,0x10,0x5c,0xe0,0x0c,0x0c,0x00,0x80]
; VI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_load_nonconst3:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    v_mov_b32_e32 v16, v0 ; encoding: [0x00,0x03,0x20,0x7e]
; GFX10-NEXT:    s_clause 0x3 ; encoding: [0x03,0x00,0xa1,0xbf]
; GFX10-NEXT:    buffer_load_dwordx4 v[0:3], v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x38,0xe0,0x00,0x00,0x00,0x80]
; GFX10-NEXT:    buffer_load_dwordx4 v[4:7], v16, s[0:3], 0 offen offset:16 ; encoding: [0x10,0x10,0x38,0xe0,0x10,0x04,0x00,0x80]
; GFX10-NEXT:    buffer_load_dwordx4 v[8:11], v16, s[0:3], 0 offen offset:32 ; encoding: [0x20,0x10,0x38,0xe0,0x10,0x08,0x00,0x80]
; GFX10-NEXT:    buffer_load_dwordx4 v[12:15], v16, s[0:3], 0 offen offset:48 ; encoding: [0x30,0x10,0x38,0xe0,0x10,0x0c,0x00,0x80]
; GFX10-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x3f,0x8c,0xbf]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  %ld = call <16 x i32> @llvm.amdgcn.s.buffer.load.v16i32(<4 x i32> %rsrc, i32 %off, i32 0)
  %bc = bitcast <16 x i32> %ld to <16 x float>
  ret <16 x float> %bc
}

; GCN-LABEL: {{^}}smrd_load_nonconst4:
; SICI: v_add_i32_e32 v{{[0-9]+}}, vcc, 0xff8, v0 ;
; SICI-DAG: buffer_load_dwordx4 v[0:3], v{{[0-9]+}}, s[0:3], 0 offen ;
; SICI-DAG: buffer_load_dwordx4 v[4:7], v{{[0-9]+}}, s[0:3], 0 offen offset:16 ;
; SICI-DAG: buffer_load_dwordx4 v[8:11], v{{[0-9]+}}, s[0:3], 0 offen offset:32 ;
; SICI-DAG: buffer_load_dwordx4 v[12:15], v{{[0-9]+}}, s[0:3], 0 offen offset:48 ;
; VIGFX9_10-DAG: buffer_load_dwordx4 v[0:3], v{{[0-9]+}}, s[0:3], 56 offen offset:4032 ;
; VIGFX9_10-DAG: buffer_load_dwordx4 v[4:7], v{{[0-9]+}}, s[0:3], 56 offen offset:4048 ;
; VIGFX9_10-DAG: buffer_load_dwordx4 v[8:11], v{{[0-9]+}}, s[0:3], 56 offen offset:4064 ;
; VIGFX9_10-DAG: buffer_load_dwordx4 v[12:15], v{{[0-9]+}}, s[0:3], 56 offen offset:4080 ;
; GCN: ; return to shader part epilog
define amdgpu_ps <16 x float> @smrd_load_nonconst4(<4 x i32> inreg %rsrc, i32 %off) #0 {
; SI-LABEL: smrd_load_nonconst4:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    v_add_i32_e32 v12, vcc, 0xff8, v0 ; encoding: [0xff,0x00,0x18,0x4a,0xf8,0x0f,0x00,0x00]
; SI-NEXT:    buffer_load_dwordx4 v[0:3], v12, s[0:3], 0 offen ; encoding: [0x00,0x10,0x38,0xe0,0x0c,0x00,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx4 v[4:7], v12, s[0:3], 0 offen offset:16 ; encoding: [0x10,0x10,0x38,0xe0,0x0c,0x04,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx4 v[8:11], v12, s[0:3], 0 offen offset:32 ; encoding: [0x20,0x10,0x38,0xe0,0x0c,0x08,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx4 v[12:15], v12, s[0:3], 0 offen offset:48 ; encoding: [0x30,0x10,0x38,0xe0,0x0c,0x0c,0x00,0x80]
; SI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_load_nonconst4:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    v_add_i32_e32 v12, vcc, 0xff8, v0 ; encoding: [0xff,0x00,0x18,0x4a,0xf8,0x0f,0x00,0x00]
; CI-NEXT:    buffer_load_dwordx4 v[0:3], v12, s[0:3], 0 offen ; encoding: [0x00,0x10,0x38,0xe0,0x0c,0x00,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx4 v[4:7], v12, s[0:3], 0 offen offset:16 ; encoding: [0x10,0x10,0x38,0xe0,0x0c,0x04,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx4 v[8:11], v12, s[0:3], 0 offen offset:32 ; encoding: [0x20,0x10,0x38,0xe0,0x0c,0x08,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx4 v[12:15], v12, s[0:3], 0 offen offset:48 ; encoding: [0x30,0x10,0x38,0xe0,0x0c,0x0c,0x00,0x80]
; CI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_load_nonconst4:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    v_mov_b32_e32 v12, v0 ; encoding: [0x00,0x03,0x18,0x7e]
; VI-NEXT:    buffer_load_dwordx4 v[0:3], v0, s[0:3], 56 offen offset:4032 ; encoding: [0xc0,0x1f,0x5c,0xe0,0x00,0x00,0x00,0xb8]
; VI-NEXT:    buffer_load_dwordx4 v[4:7], v12, s[0:3], 56 offen offset:4048 ; encoding: [0xd0,0x1f,0x5c,0xe0,0x0c,0x04,0x00,0xb8]
; VI-NEXT:    buffer_load_dwordx4 v[8:11], v12, s[0:3], 56 offen offset:4064 ; encoding: [0xe0,0x1f,0x5c,0xe0,0x0c,0x08,0x00,0xb8]
; VI-NEXT:    buffer_load_dwordx4 v[12:15], v12, s[0:3], 56 offen offset:4080 ; encoding: [0xf0,0x1f,0x5c,0xe0,0x0c,0x0c,0x00,0xb8]
; VI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_load_nonconst4:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    v_mov_b32_e32 v16, v0 ; encoding: [0x00,0x03,0x20,0x7e]
; GFX10-NEXT:    s_clause 0x3 ; encoding: [0x03,0x00,0xa1,0xbf]
; GFX10-NEXT:    buffer_load_dwordx4 v[0:3], v0, s[0:3], 56 offen offset:4032 ; encoding: [0xc0,0x1f,0x38,0xe0,0x00,0x00,0x00,0xb8]
; GFX10-NEXT:    buffer_load_dwordx4 v[4:7], v16, s[0:3], 56 offen offset:4048 ; encoding: [0xd0,0x1f,0x38,0xe0,0x10,0x04,0x00,0xb8]
; GFX10-NEXT:    buffer_load_dwordx4 v[8:11], v16, s[0:3], 56 offen offset:4064 ; encoding: [0xe0,0x1f,0x38,0xe0,0x10,0x08,0x00,0xb8]
; GFX10-NEXT:    buffer_load_dwordx4 v[12:15], v16, s[0:3], 56 offen offset:4080 ; encoding: [0xf0,0x1f,0x38,0xe0,0x10,0x0c,0x00,0xb8]
; GFX10-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x3f,0x8c,0xbf]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  %off.2 = add i32 %off, 4088
  %ld = call <16 x i32> @llvm.amdgcn.s.buffer.load.v16i32(<4 x i32> %rsrc, i32 %off.2, i32 0)
  %bc = bitcast <16 x i32> %ld to <16 x float>
  ret <16 x float> %bc
}

; GCN-LABEL: {{^}}smrd_load_nonconst5:
; SICI: v_add_i32_e32 v{{[0-9]+}}, vcc, 0x1004, v0
; SICI-DAG: buffer_load_dwordx4 v[0:3], v{{[0-9]+}}, s[0:3], 0 offen ;
; SICI-DAG: buffer_load_dwordx4 v[4:7], v{{[0-9]+}}, s[0:3], 0 offen offset:16 ;
; SICI-DAG: buffer_load_dwordx4 v[8:11], v{{[0-9]+}}, s[0:3], 0 offen offset:32 ;
; SICI-DAG: buffer_load_dwordx4 v[12:15], v{{[0-9]+}}, s[0:3], 0 offen offset:48 ;
; VIGFX9_10: s_movk_i32 s4, 0xfc0
; VIGFX9_10-DAG: buffer_load_dwordx4 v[0:3], v{{[0-9]+}}, s[0:3], s4 offen offset:68 ;
; VIGFX9_10-DAG: buffer_load_dwordx4 v[4:7], v{{[0-9]+}}, s[0:3], s4 offen offset:84 ;
; VIGFX9_10-DAG: buffer_load_dwordx4 v[8:11], v{{[0-9]+}}, s[0:3], s4 offen offset:100 ;
; VIGFX9_10-DAG: buffer_load_dwordx4 v[12:15], v{{[0-9]+}}, s[0:3], s4 offen offset:116 ;
; GCN: ; return to shader part epilog
define amdgpu_ps <16 x float> @smrd_load_nonconst5(<4 x i32> inreg %rsrc, i32 %off) #0 {
; SI-LABEL: smrd_load_nonconst5:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    v_add_i32_e32 v12, vcc, 0x1004, v0 ; encoding: [0xff,0x00,0x18,0x4a,0x04,0x10,0x00,0x00]
; SI-NEXT:    buffer_load_dwordx4 v[0:3], v12, s[0:3], 0 offen ; encoding: [0x00,0x10,0x38,0xe0,0x0c,0x00,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx4 v[4:7], v12, s[0:3], 0 offen offset:16 ; encoding: [0x10,0x10,0x38,0xe0,0x0c,0x04,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx4 v[8:11], v12, s[0:3], 0 offen offset:32 ; encoding: [0x20,0x10,0x38,0xe0,0x0c,0x08,0x00,0x80]
; SI-NEXT:    buffer_load_dwordx4 v[12:15], v12, s[0:3], 0 offen offset:48 ; encoding: [0x30,0x10,0x38,0xe0,0x0c,0x0c,0x00,0x80]
; SI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_load_nonconst5:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    v_add_i32_e32 v12, vcc, 0x1004, v0 ; encoding: [0xff,0x00,0x18,0x4a,0x04,0x10,0x00,0x00]
; CI-NEXT:    buffer_load_dwordx4 v[0:3], v12, s[0:3], 0 offen ; encoding: [0x00,0x10,0x38,0xe0,0x0c,0x00,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx4 v[4:7], v12, s[0:3], 0 offen offset:16 ; encoding: [0x10,0x10,0x38,0xe0,0x0c,0x04,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx4 v[8:11], v12, s[0:3], 0 offen offset:32 ; encoding: [0x20,0x10,0x38,0xe0,0x0c,0x08,0x00,0x80]
; CI-NEXT:    buffer_load_dwordx4 v[12:15], v12, s[0:3], 0 offen offset:48 ; encoding: [0x30,0x10,0x38,0xe0,0x0c,0x0c,0x00,0x80]
; CI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_load_nonconst5:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    v_mov_b32_e32 v12, v0 ; encoding: [0x00,0x03,0x18,0x7e]
; VI-NEXT:    s_movk_i32 s4, 0xfc0 ; encoding: [0xc0,0x0f,0x04,0xb0]
; VI-NEXT:    buffer_load_dwordx4 v[0:3], v0, s[0:3], s4 offen offset:68 ; encoding: [0x44,0x10,0x5c,0xe0,0x00,0x00,0x00,0x04]
; VI-NEXT:    buffer_load_dwordx4 v[4:7], v12, s[0:3], s4 offen offset:84 ; encoding: [0x54,0x10,0x5c,0xe0,0x0c,0x04,0x00,0x04]
; VI-NEXT:    buffer_load_dwordx4 v[8:11], v12, s[0:3], s4 offen offset:100 ; encoding: [0x64,0x10,0x5c,0xe0,0x0c,0x08,0x00,0x04]
; VI-NEXT:    buffer_load_dwordx4 v[12:15], v12, s[0:3], s4 offen offset:116 ; encoding: [0x74,0x10,0x5c,0xe0,0x0c,0x0c,0x00,0x04]
; VI-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x0f,0x8c,0xbf]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_load_nonconst5:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    v_mov_b32_e32 v16, v0 ; encoding: [0x00,0x03,0x20,0x7e]
; GFX10-NEXT:    s_movk_i32 s4, 0xfc0 ; encoding: [0xc0,0x0f,0x04,0xb0]
; GFX10-NEXT:    s_clause 0x3 ; encoding: [0x03,0x00,0xa1,0xbf]
; GFX10-NEXT:    buffer_load_dwordx4 v[0:3], v0, s[0:3], s4 offen offset:68 ; encoding: [0x44,0x10,0x38,0xe0,0x00,0x00,0x00,0x04]
; GFX10-NEXT:    buffer_load_dwordx4 v[4:7], v16, s[0:3], s4 offen offset:84 ; encoding: [0x54,0x10,0x38,0xe0,0x10,0x04,0x00,0x04]
; GFX10-NEXT:    buffer_load_dwordx4 v[8:11], v16, s[0:3], s4 offen offset:100 ; encoding: [0x64,0x10,0x38,0xe0,0x10,0x08,0x00,0x04]
; GFX10-NEXT:    buffer_load_dwordx4 v[12:15], v16, s[0:3], s4 offen offset:116 ; encoding: [0x74,0x10,0x38,0xe0,0x10,0x0c,0x00,0x04]
; GFX10-NEXT:    s_waitcnt vmcnt(0) ; encoding: [0x70,0x3f,0x8c,0xbf]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  %off.2 = add i32 %off, 4100
  %ld = call <16 x i32> @llvm.amdgcn.s.buffer.load.v16i32(<4 x i32> %rsrc, i32 %off.2, i32 0)
  %bc = bitcast <16 x i32> %ld to <16 x float>
  ret <16 x float> %bc
}

; SMRD load dwordx2
; GCN-LABEL: {{^}}smrd_load_dwordx2:
; SIVIGFX9_10: s_buffer_load_dwordx2 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]+:[0-9]+}}], s{{[0-9]+}}
; CI: s_buffer_load_dwordx2 s[{{[0-9]+:[0-9]+}}], s[{{[0-9]+:[0-9]+}}], s{{[0-9]+}}
; GCN: s_endpgm
define amdgpu_ps void @smrd_load_dwordx2(ptr addrspace(4) inreg %arg, ptr addrspace(4) inreg %arg1, ptr addrspace(4) inreg %arg2, i32 inreg %arg3, <2 x i32> %arg4, <2 x i32> %arg5, <2 x i32> %arg6, <3 x i32> %arg7, <2 x i32> %arg8, <2 x i32> %arg9, <2 x i32> %arg10, float %arg11, float %arg12, float %arg13, float %arg14, float %arg15, float %arg16, float %arg17, float %arg18, float %arg19, ptr addrspace(4) inreg %in, i32 inreg %ncoff) #0 {
; SI-LABEL: smrd_load_dwordx2:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; SI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    s_nop 1 ; encoding: [0x01,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], s9 ; encoding: [0x09,0x00,0x40,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; SI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; SI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: smrd_load_dwordx2:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; CI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; CI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x01,0x80,0xc0]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], s9 ; encoding: [0x09,0x00,0x40,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; CI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; CI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: smrd_load_dwordx2:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x00,0x81,0xbe]
; VI-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x00,0x80,0xbe]
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x0a,0xc0,0x00,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], s9 ; encoding: [0x00,0x00,0x24,0xc0,0x09,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; VI-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; VI-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xc4,0x00,0x00,0x00,0x01]
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: smrd_load_dwordx2:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_mov_b32 s1, s8 ; encoding: [0x08,0x03,0x81,0xbe]
; GFX10-NEXT:    s_mov_b32 s0, s7 ; encoding: [0x07,0x03,0x80,0xbe]
; GFX10-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0 ; encoding: [0x00,0x00,0x08,0xf4,0x00,0x00,0x00,0xfa]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], s9 offset:0x0 ; encoding: [0x00,0x00,0x24,0xf4,0x00,0x00,0x00,0x12]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_mov_b32_e32 v0, s0 ; encoding: [0x00,0x02,0x00,0x7e]
; GFX10-NEXT:    v_mov_b32_e32 v1, s1 ; encoding: [0x01,0x02,0x02,0x7e]
; GFX10-NEXT:    exp mrt0 v0, v0, v0, v1 done vm ; encoding: [0x0f,0x18,0x00,0xf8,0x00,0x00,0x00,0x01]
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
main_body:
  %tmp22 = load <4 x i32>, ptr addrspace(4) %in
  %s.buffer = call <2 x i32> @llvm.amdgcn.s.buffer.load.v2i32(<4 x i32> %tmp22, i32 %ncoff, i32 0)
  %s.buffer.float = bitcast <2 x i32> %s.buffer to <2 x float>
  %r.1 = extractelement <2 x float> %s.buffer.float, i32 0
  %r.2 = extractelement <2 x float> %s.buffer.float, i32 1
  call void @llvm.amdgcn.exp.f32(i32 0, i32 15, float %r.1, float %r.1, float %r.1, float %r.2, i1 true, i1 true) #0
  ret void
}

; GCN-LABEL: {{^}}smrd_uniform_loop:
;
; TODO: we should keep the loop counter in an SGPR
;
; GCN: s_buffer_load_dword
define amdgpu_ps float @smrd_uniform_loop(<4 x i32> inreg %desc, i32 %bound) #0 {
; SI-LABEL: smrd_uniform_loop:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s6, 0 ; encoding: [0x80,0x03,0x86,0xbe]
; SI-NEXT:    s_mov_b64 s[4:5], 0 ; encoding: [0x80,0x04,0x84,0xbe]
; SI-NEXT:    v_mov_b32_e32 v1, 0 ; encoding: [0x80,0x02,0x02,0x7e]
; SI-NEXT:    s_mov_b32 s7, 0 ; encoding: [0x80,0x03,0x87,0xbe]
; SI-NEXT:  .LBB35_1: ; %loop
; SI-NEXT:    ; =>This Inner Loop Header: Depth=1
; SI-NEXT:    s_nop 0 ; encoding: [0x00,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dword s8, s[0:3], s6 ; encoding: [0x06,0x00,0x04,0xc2]
; SI-NEXT:    s_add_i32 s7, s7, 1 ; encoding: [0x07,0x81,0x07,0x81]
; SI-NEXT:    s_add_i32 s6, s6, 4 ; encoding: [0x06,0x84,0x06,0x81]
; SI-NEXT:    v_cmp_ge_u32_e32 vcc, s7, v0 ; encoding: [0x07,0x00,0x8c,0x7d]
; SI-NEXT:    s_or_b64 s[4:5], vcc, s[4:5] ; encoding: [0x6a,0x04,0x84,0x88]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_add_f32_e32 v1, s8, v1 ; encoding: [0x08,0x02,0x02,0x06]
; SI-NEXT:    s_andn2_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x8a]
; SI-NEXT:    s_cbranch_execnz .LBB35_1 ; encoding: [A,A,0x89,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB35_1, kind: fixup_si_sopp_br
; SI-NEXT:  ; %bb.2: ; %exit
; SI-NEXT:    s_or_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x88]
; SI-NEXT:    v_mov_b32_e32 v0, v1 ; encoding: [0x01,0x03,0x00,0x7e]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_uniform_loop:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s6, 0 ; encoding: [0x80,0x03,0x86,0xbe]
; CI-NEXT:    s_mov_b64 s[4:5], 0 ; encoding: [0x80,0x04,0x84,0xbe]
; CI-NEXT:    v_mov_b32_e32 v1, 0 ; encoding: [0x80,0x02,0x02,0x7e]
; CI-NEXT:    s_mov_b32 s7, 0 ; encoding: [0x80,0x03,0x87,0xbe]
; CI-NEXT:  .LBB35_1: ; %loop
; CI-NEXT:    ; =>This Inner Loop Header: Depth=1
; CI-NEXT:    s_buffer_load_dword s8, s[0:3], s6 ; encoding: [0x06,0x00,0x04,0xc2]
; CI-NEXT:    s_add_i32 s7, s7, 1 ; encoding: [0x07,0x81,0x07,0x81]
; CI-NEXT:    s_add_i32 s6, s6, 4 ; encoding: [0x06,0x84,0x06,0x81]
; CI-NEXT:    v_cmp_ge_u32_e32 vcc, s7, v0 ; encoding: [0x07,0x00,0x8c,0x7d]
; CI-NEXT:    s_or_b64 s[4:5], vcc, s[4:5] ; encoding: [0x6a,0x04,0x84,0x88]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_add_f32_e32 v1, s8, v1 ; encoding: [0x08,0x02,0x02,0x06]
; CI-NEXT:    s_andn2_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x8a]
; CI-NEXT:    s_cbranch_execnz .LBB35_1 ; encoding: [A,A,0x89,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB35_1, kind: fixup_si_sopp_br
; CI-NEXT:  ; %bb.2: ; %exit
; CI-NEXT:    s_or_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x88]
; CI-NEXT:    v_mov_b32_e32 v0, v1 ; encoding: [0x01,0x03,0x00,0x7e]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_uniform_loop:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s6, 0 ; encoding: [0x80,0x00,0x86,0xbe]
; VI-NEXT:    s_mov_b64 s[4:5], 0 ; encoding: [0x80,0x01,0x84,0xbe]
; VI-NEXT:    v_mov_b32_e32 v1, 0 ; encoding: [0x80,0x02,0x02,0x7e]
; VI-NEXT:    s_mov_b32 s7, 0 ; encoding: [0x80,0x00,0x87,0xbe]
; VI-NEXT:  .LBB35_1: ; %loop
; VI-NEXT:    ; =>This Inner Loop Header: Depth=1
; VI-NEXT:    s_buffer_load_dword s8, s[0:3], s6 ; encoding: [0x00,0x02,0x20,0xc0,0x06,0x00,0x00,0x00]
; VI-NEXT:    s_add_i32 s7, s7, 1 ; encoding: [0x07,0x81,0x07,0x81]
; VI-NEXT:    s_add_i32 s6, s6, 4 ; encoding: [0x06,0x84,0x06,0x81]
; VI-NEXT:    v_cmp_ge_u32_e32 vcc, s7, v0 ; encoding: [0x07,0x00,0x9c,0x7d]
; VI-NEXT:    s_or_b64 s[4:5], vcc, s[4:5] ; encoding: [0x6a,0x04,0x84,0x87]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_add_f32_e32 v1, s8, v1 ; encoding: [0x08,0x02,0x02,0x02]
; VI-NEXT:    s_andn2_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x89]
; VI-NEXT:    s_cbranch_execnz .LBB35_1 ; encoding: [A,A,0x89,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB35_1, kind: fixup_si_sopp_br
; VI-NEXT:  ; %bb.2: ; %exit
; VI-NEXT:    s_or_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x87]
; VI-NEXT:    v_mov_b32_e32 v0, v1 ; encoding: [0x01,0x03,0x00,0x7e]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_uniform_loop:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    v_mov_b32_e32 v1, 0 ; encoding: [0x80,0x02,0x02,0x7e]
; GFX10-NEXT:    s_mov_b32 s4, 0 ; encoding: [0x80,0x03,0x84,0xbe]
; GFX10-NEXT:    s_mov_b32 s5, 0 ; encoding: [0x80,0x03,0x85,0xbe]
; GFX10-NEXT:    s_mov_b32 s6, 0 ; encoding: [0x80,0x03,0x86,0xbe]
; GFX10-NEXT:  .LBB35_1: ; %loop
; GFX10-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX10-NEXT:    s_buffer_load_dword s7, s[0:3], s5 offset:0x0 ; encoding: [0xc0,0x01,0x20,0xf4,0x00,0x00,0x00,0x0a]
; GFX10-NEXT:    s_add_i32 s6, s6, 1 ; encoding: [0x06,0x81,0x06,0x81]
; GFX10-NEXT:    s_add_i32 s5, s5, 4 ; encoding: [0x05,0x84,0x05,0x81]
; GFX10-NEXT:    v_cmp_ge_u32_e32 vcc_lo, s6, v0 ; encoding: [0x06,0x00,0x8c,0x7d]
; GFX10-NEXT:    s_or_b32 s4, vcc_lo, s4 ; encoding: [0x6a,0x04,0x04,0x88]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_add_f32_e32 v1, s7, v1 ; encoding: [0x07,0x02,0x02,0x06]
; GFX10-NEXT:    s_andn2_b32 exec_lo, exec_lo, s4 ; encoding: [0x7e,0x04,0x7e,0x8a]
; GFX10-NEXT:    s_cbranch_execnz .LBB35_1 ; encoding: [A,A,0x89,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB35_1, kind: fixup_si_sopp_br
; GFX10-NEXT:  ; %bb.2: ; %exit
; GFX10-NEXT:    s_or_b32 exec_lo, exec_lo, s4 ; encoding: [0x7e,0x04,0x7e,0x88]
; GFX10-NEXT:    v_mov_b32_e32 v0, v1 ; encoding: [0x01,0x03,0x00,0x7e]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  br label %loop

loop:
  %counter = phi i32 [ 0, %main_body ], [ %counter.next, %loop ]
  %sum = phi float [ 0.0, %main_body ], [ %sum.next, %loop ]
  %offset = shl i32 %counter, 2
  %v = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %offset, i32 0)
  %sum.next = fadd float %sum, %v
  %counter.next = add i32 %counter, 1
  %cc = icmp uge i32 %counter.next, %bound
  br i1 %cc, label %exit, label %loop

exit:
  ret float %sum.next
}


; GCN-LABEL: {{^}}smrd_uniform_loop2:
; (this test differs from smrd_uniform_loop by the more complex structure of phis)
;
; TODO: we should keep the loop counter in an SGPR and use an S_BUFFER_LOAD
;
; GCN: buffer_load_dword
define amdgpu_ps float @smrd_uniform_loop2(<4 x i32> inreg %desc, i32 %bound, i32 %bound.a) #0 {
; SI-LABEL: smrd_uniform_loop2:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b32 s10, 1 ; encoding: [0x81,0x03,0x8a,0xbe]
; SI-NEXT:    s_mov_b32 s11, 0 ; encoding: [0x80,0x03,0x8b,0xbe]
; SI-NEXT:    s_mov_b64 s[4:5], 0 ; encoding: [0x80,0x04,0x84,0xbe]
; SI-NEXT:    v_mov_b32_e32 v2, 0 ; encoding: [0x80,0x02,0x04,0x7e]
; SI-NEXT:    ; implicit-def: $sgpr6_sgpr7
; SI-NEXT:    s_branch .LBB36_2 ; encoding: [A,A,0x82,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB36_2, kind: fixup_si_sopp_br
; SI-NEXT:  .LBB36_1: ; %Flow
; SI-NEXT:    ; in Loop: Header=BB36_2 Depth=1
; SI-NEXT:    s_or_b64 exec, exec, s[8:9] ; encoding: [0x7e,0x08,0xfe,0x88]
; SI-NEXT:    s_and_b64 s[8:9], exec, s[6:7] ; encoding: [0x7e,0x06,0x88,0x87]
; SI-NEXT:    s_or_b64 s[4:5], s[8:9], s[4:5] ; encoding: [0x08,0x04,0x84,0x88]
; SI-NEXT:    s_andn2_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x8a]
; SI-NEXT:    s_cbranch_execz .LBB36_4 ; encoding: [A,A,0x88,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB36_4, kind: fixup_si_sopp_br
; SI-NEXT:  .LBB36_2: ; %loop
; SI-NEXT:    ; =>This Inner Loop Header: Depth=1
; SI-NEXT:    s_nop 0 ; encoding: [0x00,0x00,0x80,0xbf]
; SI-NEXT:    s_buffer_load_dword s8, s[0:3], s11 ; encoding: [0x0b,0x00,0x04,0xc2]
; SI-NEXT:    v_cmp_lt_u32_e32 vcc, s10, v0 ; encoding: [0x0a,0x00,0x82,0x7d]
; SI-NEXT:    s_or_b64 s[6:7], s[6:7], exec ; encoding: [0x06,0x7e,0x86,0x88]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    v_add_f32_e32 v1, s8, v2 ; encoding: [0x08,0x04,0x02,0x06]
; SI-NEXT:    ; implicit-def: $vgpr2
; SI-NEXT:    s_and_saveexec_b64 s[8:9], vcc ; encoding: [0x6a,0x24,0x88,0xbe]
; SI-NEXT:    s_cbranch_execz .LBB36_1 ; encoding: [A,A,0x88,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB36_1, kind: fixup_si_sopp_br
; SI-NEXT:  ; %bb.3: ; %loop.a
; SI-NEXT:    ; in Loop: Header=BB36_2 Depth=1
; SI-NEXT:    v_add_f32_e32 v2, 1.0, v1 ; encoding: [0xf2,0x02,0x04,0x06]
; SI-NEXT:    s_add_i32 s10, s10, 1 ; encoding: [0x0a,0x81,0x0a,0x81]
; SI-NEXT:    s_add_i32 s11, s11, 4 ; encoding: [0x0b,0x84,0x0b,0x81]
; SI-NEXT:    s_andn2_b64 s[6:7], s[6:7], exec ; encoding: [0x06,0x7e,0x86,0x8a]
; SI-NEXT:    s_branch .LBB36_1 ; encoding: [A,A,0x82,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB36_1, kind: fixup_si_sopp_br
; SI-NEXT:  .LBB36_4: ; %exit
; SI-NEXT:    s_or_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x88]
; SI-NEXT:    v_mov_b32_e32 v0, v1 ; encoding: [0x01,0x03,0x00,0x7e]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: smrd_uniform_loop2:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_mov_b32 s10, 1 ; encoding: [0x81,0x03,0x8a,0xbe]
; CI-NEXT:    s_mov_b32 s11, 0 ; encoding: [0x80,0x03,0x8b,0xbe]
; CI-NEXT:    s_mov_b64 s[4:5], 0 ; encoding: [0x80,0x04,0x84,0xbe]
; CI-NEXT:    v_mov_b32_e32 v2, 0 ; encoding: [0x80,0x02,0x04,0x7e]
; CI-NEXT:    ; implicit-def: $sgpr6_sgpr7
; CI-NEXT:    s_branch .LBB36_2 ; encoding: [A,A,0x82,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB36_2, kind: fixup_si_sopp_br
; CI-NEXT:  .LBB36_1: ; %Flow
; CI-NEXT:    ; in Loop: Header=BB36_2 Depth=1
; CI-NEXT:    s_or_b64 exec, exec, s[8:9] ; encoding: [0x7e,0x08,0xfe,0x88]
; CI-NEXT:    s_and_b64 s[8:9], exec, s[6:7] ; encoding: [0x7e,0x06,0x88,0x87]
; CI-NEXT:    s_or_b64 s[4:5], s[8:9], s[4:5] ; encoding: [0x08,0x04,0x84,0x88]
; CI-NEXT:    s_andn2_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x8a]
; CI-NEXT:    s_cbranch_execz .LBB36_4 ; encoding: [A,A,0x88,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB36_4, kind: fixup_si_sopp_br
; CI-NEXT:  .LBB36_2: ; %loop
; CI-NEXT:    ; =>This Inner Loop Header: Depth=1
; CI-NEXT:    s_buffer_load_dword s8, s[0:3], s11 ; encoding: [0x0b,0x00,0x04,0xc2]
; CI-NEXT:    v_cmp_lt_u32_e32 vcc, s10, v0 ; encoding: [0x0a,0x00,0x82,0x7d]
; CI-NEXT:    s_or_b64 s[6:7], s[6:7], exec ; encoding: [0x06,0x7e,0x86,0x88]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    v_add_f32_e32 v1, s8, v2 ; encoding: [0x08,0x04,0x02,0x06]
; CI-NEXT:    ; implicit-def: $vgpr2
; CI-NEXT:    s_and_saveexec_b64 s[8:9], vcc ; encoding: [0x6a,0x24,0x88,0xbe]
; CI-NEXT:    s_cbranch_execz .LBB36_1 ; encoding: [A,A,0x88,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB36_1, kind: fixup_si_sopp_br
; CI-NEXT:  ; %bb.3: ; %loop.a
; CI-NEXT:    ; in Loop: Header=BB36_2 Depth=1
; CI-NEXT:    v_add_f32_e32 v2, 1.0, v1 ; encoding: [0xf2,0x02,0x04,0x06]
; CI-NEXT:    s_add_i32 s10, s10, 1 ; encoding: [0x0a,0x81,0x0a,0x81]
; CI-NEXT:    s_add_i32 s11, s11, 4 ; encoding: [0x0b,0x84,0x0b,0x81]
; CI-NEXT:    s_andn2_b64 s[6:7], s[6:7], exec ; encoding: [0x06,0x7e,0x86,0x8a]
; CI-NEXT:    s_branch .LBB36_1 ; encoding: [A,A,0x82,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB36_1, kind: fixup_si_sopp_br
; CI-NEXT:  .LBB36_4: ; %exit
; CI-NEXT:    s_or_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x88]
; CI-NEXT:    v_mov_b32_e32 v0, v1 ; encoding: [0x01,0x03,0x00,0x7e]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: smrd_uniform_loop2:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b32 s10, 1 ; encoding: [0x81,0x00,0x8a,0xbe]
; VI-NEXT:    s_mov_b32 s11, 0 ; encoding: [0x80,0x00,0x8b,0xbe]
; VI-NEXT:    s_mov_b64 s[4:5], 0 ; encoding: [0x80,0x01,0x84,0xbe]
; VI-NEXT:    v_mov_b32_e32 v2, 0 ; encoding: [0x80,0x02,0x04,0x7e]
; VI-NEXT:    ; implicit-def: $sgpr6_sgpr7
; VI-NEXT:    s_branch .LBB36_2 ; encoding: [A,A,0x82,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB36_2, kind: fixup_si_sopp_br
; VI-NEXT:  .LBB36_1: ; %Flow
; VI-NEXT:    ; in Loop: Header=BB36_2 Depth=1
; VI-NEXT:    s_or_b64 exec, exec, s[8:9] ; encoding: [0x7e,0x08,0xfe,0x87]
; VI-NEXT:    s_and_b64 s[8:9], exec, s[6:7] ; encoding: [0x7e,0x06,0x88,0x86]
; VI-NEXT:    s_or_b64 s[4:5], s[8:9], s[4:5] ; encoding: [0x08,0x04,0x84,0x87]
; VI-NEXT:    s_andn2_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x89]
; VI-NEXT:    s_cbranch_execz .LBB36_4 ; encoding: [A,A,0x88,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB36_4, kind: fixup_si_sopp_br
; VI-NEXT:  .LBB36_2: ; %loop
; VI-NEXT:    ; =>This Inner Loop Header: Depth=1
; VI-NEXT:    s_buffer_load_dword s8, s[0:3], s11 ; encoding: [0x00,0x02,0x20,0xc0,0x0b,0x00,0x00,0x00]
; VI-NEXT:    v_cmp_lt_u32_e32 vcc, s10, v0 ; encoding: [0x0a,0x00,0x92,0x7d]
; VI-NEXT:    s_or_b64 s[6:7], s[6:7], exec ; encoding: [0x06,0x7e,0x86,0x87]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    v_add_f32_e32 v1, s8, v2 ; encoding: [0x08,0x04,0x02,0x02]
; VI-NEXT:    ; implicit-def: $vgpr2
; VI-NEXT:    s_and_saveexec_b64 s[8:9], vcc ; encoding: [0x6a,0x20,0x88,0xbe]
; VI-NEXT:    s_cbranch_execz .LBB36_1 ; encoding: [A,A,0x88,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB36_1, kind: fixup_si_sopp_br
; VI-NEXT:  ; %bb.3: ; %loop.a
; VI-NEXT:    ; in Loop: Header=BB36_2 Depth=1
; VI-NEXT:    v_add_f32_e32 v2, 1.0, v1 ; encoding: [0xf2,0x02,0x04,0x02]
; VI-NEXT:    s_add_i32 s10, s10, 1 ; encoding: [0x0a,0x81,0x0a,0x81]
; VI-NEXT:    s_add_i32 s11, s11, 4 ; encoding: [0x0b,0x84,0x0b,0x81]
; VI-NEXT:    s_andn2_b64 s[6:7], s[6:7], exec ; encoding: [0x06,0x7e,0x86,0x89]
; VI-NEXT:    s_branch .LBB36_1 ; encoding: [A,A,0x82,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB36_1, kind: fixup_si_sopp_br
; VI-NEXT:  .LBB36_4: ; %exit
; VI-NEXT:    s_or_b64 exec, exec, s[4:5] ; encoding: [0x7e,0x04,0xfe,0x87]
; VI-NEXT:    v_mov_b32_e32 v0, v1 ; encoding: [0x01,0x03,0x00,0x7e]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: smrd_uniform_loop2:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    v_mov_b32_e32 v2, 0 ; encoding: [0x80,0x02,0x04,0x7e]
; GFX10-NEXT:    s_mov_b32 s5, 1 ; encoding: [0x81,0x03,0x85,0xbe]
; GFX10-NEXT:    s_mov_b32 s4, 0 ; encoding: [0x80,0x03,0x84,0xbe]
; GFX10-NEXT:    s_mov_b32 s6, 0 ; encoding: [0x80,0x03,0x86,0xbe]
; GFX10-NEXT:    ; implicit-def: $sgpr7
; GFX10-NEXT:    s_branch .LBB36_2 ; encoding: [A,A,0x82,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB36_2, kind: fixup_si_sopp_br
; GFX10-NEXT:  .LBB36_1: ; %Flow
; GFX10-NEXT:    ; in Loop: Header=BB36_2 Depth=1
; GFX10-NEXT:    s_or_b32 exec_lo, exec_lo, s8 ; encoding: [0x7e,0x08,0x7e,0x88]
; GFX10-NEXT:    s_and_b32 s8, exec_lo, s7 ; encoding: [0x7e,0x07,0x08,0x87]
; GFX10-NEXT:    s_or_b32 s4, s8, s4 ; encoding: [0x08,0x04,0x04,0x88]
; GFX10-NEXT:    s_andn2_b32 exec_lo, exec_lo, s4 ; encoding: [0x7e,0x04,0x7e,0x8a]
; GFX10-NEXT:    s_cbranch_execz .LBB36_4 ; encoding: [A,A,0x88,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB36_4, kind: fixup_si_sopp_br
; GFX10-NEXT:  .LBB36_2: ; %loop
; GFX10-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX10-NEXT:    s_buffer_load_dword s8, s[0:3], s6 offset:0x0 ; encoding: [0x00,0x02,0x20,0xf4,0x00,0x00,0x00,0x0c]
; GFX10-NEXT:    v_cmp_lt_u32_e32 vcc_lo, s5, v0 ; encoding: [0x05,0x00,0x82,0x7d]
; GFX10-NEXT:    s_or_b32 s7, s7, exec_lo ; encoding: [0x07,0x7e,0x07,0x88]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    v_add_f32_e32 v1, s8, v2 ; encoding: [0x08,0x04,0x02,0x06]
; GFX10-NEXT:    ; implicit-def: $vgpr2
; GFX10-NEXT:    s_and_saveexec_b32 s8, vcc_lo ; encoding: [0x6a,0x3c,0x88,0xbe]
; GFX10-NEXT:    s_cbranch_execz .LBB36_1 ; encoding: [A,A,0x88,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB36_1, kind: fixup_si_sopp_br
; GFX10-NEXT:  ; %bb.3: ; %loop.a
; GFX10-NEXT:    ; in Loop: Header=BB36_2 Depth=1
; GFX10-NEXT:    v_add_f32_e32 v2, 1.0, v1 ; encoding: [0xf2,0x02,0x04,0x06]
; GFX10-NEXT:    s_add_i32 s5, s5, 1 ; encoding: [0x05,0x81,0x05,0x81]
; GFX10-NEXT:    s_add_i32 s6, s6, 4 ; encoding: [0x06,0x84,0x06,0x81]
; GFX10-NEXT:    s_andn2_b32 s7, s7, exec_lo ; encoding: [0x07,0x7e,0x07,0x8a]
; GFX10-NEXT:    s_branch .LBB36_1 ; encoding: [A,A,0x82,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB36_1, kind: fixup_si_sopp_br
; GFX10-NEXT:  .LBB36_4: ; %exit
; GFX10-NEXT:    s_or_b32 exec_lo, exec_lo, s4 ; encoding: [0x7e,0x04,0x7e,0x88]
; GFX10-NEXT:    v_mov_b32_e32 v0, v1 ; encoding: [0x01,0x03,0x00,0x7e]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  br label %loop

loop:
  %counter = phi i32 [ 0, %main_body ], [ %counter.next, %loop.a ], [ %counter.next, %loop.b ]
  %sum = phi float [ 0.0, %main_body ], [ %sum.next, %loop.a ], [ %sum.next.b, %loop.b ]
  %offset = shl i32 %counter, 2
  %v = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %desc, i32 %offset, i32 0)
  %sum.next = fadd float %sum, %v
  %counter.next = add i32 %counter, 1
  %cc = icmp uge i32 %counter.next, %bound
  br i1 %cc, label %exit, label %loop.a

loop.a:
  %cc.a = icmp uge i32 %counter.next, %bound.a
  br i1 %cc, label %loop, label %loop.b

loop.b:
  %sum.next.b = fadd float %sum.next, 1.0
  br label %loop

exit:
  ret float %sum.next
}

; This test checks that the load after some control flow with an offset based
; on a divergent shader input is correctly recognized as divergent. This was
; reduced from an actual regression. Yes, the %unused argument matters, as
; well as the fact that %arg4 is a vector.
;
; GCN-LABEL: {{^}}arg_divergence:
; GCN: buffer_load_dword v0, v0,
; GCN-NEXT: s_waitcnt
; GCN-NEXT: ; return to shader part epilog
define amdgpu_cs float @arg_divergence(i32 inreg %unused, <3 x i32> %arg4) #0 {
; SI-LABEL: arg_divergence:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_cbranch_scc1 .LBB37_2 ; encoding: [A,A,0x85,0xbf]
; SI-NEXT:    ; fixup A - offset: 0, value: .LBB37_2, kind: fixup_si_sopp_br
; SI-NEXT:  ; %bb.1: ; %if1
; SI-NEXT:    v_mov_b32_e32 v1, 0 ; encoding: [0x80,0x02,0x02,0x7e]
; SI-NEXT:    s_mov_b32 m0, -1 ; encoding: [0xc1,0x03,0xfc,0xbe]
; SI-NEXT:    ds_write_b32 v0, v1 ; encoding: [0x00,0x00,0x34,0xd8,0x00,0x01,0x00,0x00]
; SI-NEXT:  .LBB37_2: ; %endif1
; SI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x00,0x00,0x00,0x80]
; SI-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0) ; encoding: [0x70,0x00,0x8c,0xbf]
; SI-NEXT:    ; return to shader part epilog
;
; CI-LABEL: arg_divergence:
; CI:       ; %bb.0: ; %main_body
; CI-NEXT:    s_cbranch_scc1 .LBB37_2 ; encoding: [A,A,0x85,0xbf]
; CI-NEXT:    ; fixup A - offset: 0, value: .LBB37_2, kind: fixup_si_sopp_br
; CI-NEXT:  ; %bb.1: ; %if1
; CI-NEXT:    v_mov_b32_e32 v1, 0 ; encoding: [0x80,0x02,0x02,0x7e]
; CI-NEXT:    s_mov_b32 m0, -1 ; encoding: [0xc1,0x03,0xfc,0xbe]
; CI-NEXT:    ds_write_b32 v0, v1 ; encoding: [0x00,0x00,0x34,0xd8,0x00,0x01,0x00,0x00]
; CI-NEXT:  .LBB37_2: ; %endif1
; CI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x00,0x00,0x00,0x80]
; CI-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0) ; encoding: [0x70,0x00,0x8c,0xbf]
; CI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: arg_divergence:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_cbranch_scc1 .LBB37_2 ; encoding: [A,A,0x85,0xbf]
; VI-NEXT:    ; fixup A - offset: 0, value: .LBB37_2, kind: fixup_si_sopp_br
; VI-NEXT:  ; %bb.1: ; %if1
; VI-NEXT:    v_mov_b32_e32 v1, 0 ; encoding: [0x80,0x02,0x02,0x7e]
; VI-NEXT:    s_mov_b32 m0, -1 ; encoding: [0xc1,0x00,0xfc,0xbe]
; VI-NEXT:    ds_write_b32 v0, v1 ; encoding: [0x00,0x00,0x1a,0xd8,0x00,0x01,0x00,0x00]
; VI-NEXT:  .LBB37_2: ; %endif1
; VI-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x50,0xe0,0x00,0x00,0x00,0x80]
; VI-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0) ; encoding: [0x70,0x00,0x8c,0xbf]
; VI-NEXT:    ; return to shader part epilog
;
; GFX10-LABEL: arg_divergence:
; GFX10:       ; %bb.0: ; %main_body
; GFX10-NEXT:    s_cbranch_scc1 .LBB37_2 ; encoding: [A,A,0x85,0xbf]
; GFX10-NEXT:    ; fixup A - offset: 0, value: .LBB37_2, kind: fixup_si_sopp_br
; GFX10-NEXT:  ; %bb.1: ; %if1
; GFX10-NEXT:    v_mov_b32_e32 v1, 0 ; encoding: [0x80,0x02,0x02,0x7e]
; GFX10-NEXT:    ds_write_b32 v0, v1 ; encoding: [0x00,0x00,0x34,0xd8,0x00,0x01,0x00,0x00]
; GFX10-NEXT:  .LBB37_2: ; %endif1
; GFX10-NEXT:    buffer_load_dword v0, v0, s[0:3], 0 offen ; encoding: [0x00,0x10,0x30,0xe0,0x00,0x00,0x00,0x80]
; GFX10-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0) ; encoding: [0x70,0x00,0x8c,0xbf]
; GFX10-NEXT:    ; return to shader part epilog
main_body:
  br i1 undef, label %if1, label %endif1

if1:                                              ; preds = %main_body
  store i32 0, ptr addrspace(3) undef, align 4
  br label %endif1

endif1:                                           ; preds = %if1, %main_body
  %tmp13 = extractelement <3 x i32> %arg4, i32 0
  %tmp97 = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> undef, i32 %tmp13, i32 0)
  ret float %tmp97
}

; GCN-LABEL: {{^}}s_buffer_load_f32:
; GCN: s_buffer_load_dword s0, s[0:3], s4
define amdgpu_ps void @s_buffer_load_f32(<4 x i32> inreg %rsrc, i32 inreg %offset) {
; SI-LABEL: s_buffer_load_f32:
; SI:       ; %bb.0:
; SI-NEXT:    s_buffer_load_dword s0, s[0:3], s4 ; encoding: [0x04,0x00,0x00,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    ;;#ASMSTART
; SI-NEXT:    ; use s0
; SI-NEXT:    ;;#ASMEND
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_f32:
; CI:       ; %bb.0:
; CI-NEXT:    s_buffer_load_dword s0, s[0:3], s4 ; encoding: [0x04,0x00,0x00,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    ;;#ASMSTART
; CI-NEXT:    ; use s0
; CI-NEXT:    ;;#ASMEND
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_f32:
; VI:       ; %bb.0:
; VI-NEXT:    s_buffer_load_dword s0, s[0:3], s4 ; encoding: [0x00,0x00,0x20,0xc0,0x04,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    ;;#ASMSTART
; VI-NEXT:    ; use s0
; VI-NEXT:    ;;#ASMEND
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_f32:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_buffer_load_dword s0, s[0:3], s4 offset:0x0 ; encoding: [0x00,0x00,0x20,0xf4,0x00,0x00,0x00,0x08]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    ;;#ASMSTART
; GFX10-NEXT:    ; use s0
; GFX10-NEXT:    ;;#ASMEND
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
  %sgpr = call float @llvm.amdgcn.s.buffer.load.f32(<4 x i32> %rsrc, i32 %offset, i32 0)
  call void asm sideeffect "; use $0", "s"(float %sgpr)
  ret void
}

; GCN-LABEL: {{^}}s_buffer_load_v2f32:
; GCN: s_buffer_load_dwordx2 s[0:1], s[0:3], s4
define amdgpu_ps void @s_buffer_load_v2f32(<4 x i32> inreg %rsrc, i32 inreg %offset) {
; SI-LABEL: s_buffer_load_v2f32:
; SI:       ; %bb.0:
; SI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], s4 ; encoding: [0x04,0x00,0x40,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    ;;#ASMSTART
; SI-NEXT:    ; use s[0:1]
; SI-NEXT:    ;;#ASMEND
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_v2f32:
; CI:       ; %bb.0:
; CI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], s4 ; encoding: [0x04,0x00,0x40,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    ;;#ASMSTART
; CI-NEXT:    ; use s[0:1]
; CI-NEXT:    ;;#ASMEND
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_v2f32:
; VI:       ; %bb.0:
; VI-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], s4 ; encoding: [0x00,0x00,0x24,0xc0,0x04,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    ;;#ASMSTART
; VI-NEXT:    ; use s[0:1]
; VI-NEXT:    ;;#ASMEND
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_v2f32:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_buffer_load_dwordx2 s[0:1], s[0:3], s4 offset:0x0 ; encoding: [0x00,0x00,0x24,0xf4,0x00,0x00,0x00,0x08]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    ;;#ASMSTART
; GFX10-NEXT:    ; use s[0:1]
; GFX10-NEXT:    ;;#ASMEND
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
  %sgpr = call <2 x float> @llvm.amdgcn.s.buffer.load.v2f32(<4 x i32> %rsrc, i32 %offset, i32 0)
  call void asm sideeffect "; use $0", "s"(<2 x float> %sgpr)
  ret void
}

; GCN-LABEL: {{^}}s_buffer_load_v4f32:
; GCN: s_buffer_load_dwordx4 s[0:3], s[0:3], s4
define amdgpu_ps void @s_buffer_load_v4f32(<4 x i32> inreg %rsrc, i32 inreg %offset) {
; SI-LABEL: s_buffer_load_v4f32:
; SI:       ; %bb.0:
; SI-NEXT:    s_buffer_load_dwordx4 s[0:3], s[0:3], s4 ; encoding: [0x04,0x00,0x80,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    ;;#ASMSTART
; SI-NEXT:    ; use s[0:3]
; SI-NEXT:    ;;#ASMEND
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_v4f32:
; CI:       ; %bb.0:
; CI-NEXT:    s_buffer_load_dwordx4 s[0:3], s[0:3], s4 ; encoding: [0x04,0x00,0x80,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    ;;#ASMSTART
; CI-NEXT:    ; use s[0:3]
; CI-NEXT:    ;;#ASMEND
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_v4f32:
; VI:       ; %bb.0:
; VI-NEXT:    s_buffer_load_dwordx4 s[0:3], s[0:3], s4 ; encoding: [0x00,0x00,0x28,0xc0,0x04,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    ;;#ASMSTART
; VI-NEXT:    ; use s[0:3]
; VI-NEXT:    ;;#ASMEND
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_v4f32:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_buffer_load_dwordx4 s[0:3], s[0:3], s4 offset:0x0 ; encoding: [0x00,0x00,0x28,0xf4,0x00,0x00,0x00,0x08]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    ;;#ASMSTART
; GFX10-NEXT:    ; use s[0:3]
; GFX10-NEXT:    ;;#ASMEND
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
  %sgpr = call <4 x float> @llvm.amdgcn.s.buffer.load.v4f32(<4 x i32> %rsrc, i32 %offset, i32 0)
  call void asm sideeffect "; use $0", "s"(<4 x float> %sgpr)
  ret void
}

; GCN-LABEL: {{^}}s_buffer_load_v8f32:
; GCN: s_buffer_load_dwordx8 s[0:7], s[0:3], s4
define amdgpu_ps void @s_buffer_load_v8f32(<4 x i32> inreg %rsrc, i32 inreg %offset) {
; SI-LABEL: s_buffer_load_v8f32:
; SI:       ; %bb.0:
; SI-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], s4 ; encoding: [0x04,0x00,0xc0,0xc2]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    ;;#ASMSTART
; SI-NEXT:    ; use s[0:7]
; SI-NEXT:    ;;#ASMEND
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_v8f32:
; CI:       ; %bb.0:
; CI-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], s4 ; encoding: [0x04,0x00,0xc0,0xc2]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    ;;#ASMSTART
; CI-NEXT:    ; use s[0:7]
; CI-NEXT:    ;;#ASMEND
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_v8f32:
; VI:       ; %bb.0:
; VI-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], s4 ; encoding: [0x00,0x00,0x2c,0xc0,0x04,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    ;;#ASMSTART
; VI-NEXT:    ; use s[0:7]
; VI-NEXT:    ;;#ASMEND
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_v8f32:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_buffer_load_dwordx8 s[0:7], s[0:3], s4 offset:0x0 ; encoding: [0x00,0x00,0x2c,0xf4,0x00,0x00,0x00,0x08]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    ;;#ASMSTART
; GFX10-NEXT:    ; use s[0:7]
; GFX10-NEXT:    ;;#ASMEND
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
  %sgpr = call <8 x float> @llvm.amdgcn.s.buffer.load.v8f32(<4 x i32> %rsrc, i32 %offset, i32 0)
  call void asm sideeffect "; use $0", "s"(<8 x float> %sgpr)
  ret void
}

; GCN-LABEL: {{^}}s_buffer_load_v16f32:
; GCN: s_buffer_load_dwordx16 s[0:15], s[0:3], s4
define amdgpu_ps void @s_buffer_load_v16f32(<4 x i32> inreg %rsrc, i32 inreg %offset) {
; SI-LABEL: s_buffer_load_v16f32:
; SI:       ; %bb.0:
; SI-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], s4 ; encoding: [0x04,0x00,0x00,0xc3]
; SI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; SI-NEXT:    ;;#ASMSTART
; SI-NEXT:    ; use s[0:15]
; SI-NEXT:    ;;#ASMEND
; SI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; CI-LABEL: s_buffer_load_v16f32:
; CI:       ; %bb.0:
; CI-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], s4 ; encoding: [0x04,0x00,0x00,0xc3]
; CI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; CI-NEXT:    ;;#ASMSTART
; CI-NEXT:    ; use s[0:15]
; CI-NEXT:    ;;#ASMEND
; CI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; VI-LABEL: s_buffer_load_v16f32:
; VI:       ; %bb.0:
; VI-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], s4 ; encoding: [0x00,0x00,0x30,0xc0,0x04,0x00,0x00,0x00]
; VI-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0x00,0x8c,0xbf]
; VI-NEXT:    ;;#ASMSTART
; VI-NEXT:    ; use s[0:15]
; VI-NEXT:    ;;#ASMEND
; VI-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
;
; GFX10-LABEL: s_buffer_load_v16f32:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_buffer_load_dwordx16 s[0:15], s[0:3], s4 offset:0x0 ; encoding: [0x00,0x00,0x30,0xf4,0x00,0x00,0x00,0x08]
; GFX10-NEXT:    s_waitcnt lgkmcnt(0) ; encoding: [0x7f,0xc0,0x8c,0xbf]
; GFX10-NEXT:    ;;#ASMSTART
; GFX10-NEXT:    ; use s[0:15]
; GFX10-NEXT:    ;;#ASMEND
; GFX10-NEXT:    s_endpgm ; encoding: [0x00,0x00,0x81,0xbf]
  %sgpr = call <16 x float> @llvm.amdgcn.s.buffer.load.v16f32(<4 x i32> %rsrc, i32 %offset, i32 0)
  call void asm sideeffect "; use $0", "s"(<16 x float> %sgpr)
  ret void
}

declare void @llvm.amdgcn.exp.f32(i32, i32, float, float, float, float, i1, i1) #0
declare float @llvm.amdgcn.interp.p1(float, i32, i32, i32) #2
declare float @llvm.amdgcn.interp.p2(float, float, i32, i32, i32) #2

declare i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32>, i32, i32) #1
declare <2 x i32> @llvm.amdgcn.s.buffer.load.v2i32(<4 x i32>, i32, i32)
declare <4 x i32> @llvm.amdgcn.s.buffer.load.v4i32(<4 x i32>, i32, i32)
declare <8 x i32> @llvm.amdgcn.s.buffer.load.v8i32(<4 x i32>, i32, i32)
declare <16 x i32> @llvm.amdgcn.s.buffer.load.v16i32(<4 x i32>, i32, i32)

declare float @llvm.amdgcn.s.buffer.load.f32(<4 x i32>, i32, i32)
declare <2 x float> @llvm.amdgcn.s.buffer.load.v2f32(<4 x i32>, i32, i32)
declare <4 x float> @llvm.amdgcn.s.buffer.load.v4f32(<4 x i32>, i32, i32)
declare <8 x float> @llvm.amdgcn.s.buffer.load.v8f32(<4 x i32>, i32, i32)
declare <16 x float> @llvm.amdgcn.s.buffer.load.v16f32(<4 x i32>, i32, i32)

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }

!0 = !{}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GCN: {{.*}}
; GFX9_10: {{.*}}
; SICI: {{.*}}
; SICIVI: {{.*}}
; SIVIGFX9_10: {{.*}}
; VIGFX9_10: {{.*}}
