; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
;RUN: llc < %s -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -verify-machineinstrs | FileCheck -check-prefix=GFX9 %s
;RUN: llc < %s -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1030 -verify-machineinstrs | FileCheck -check-prefix=GFX1030 %s
;RUN: llc < %s -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1100 -verify-machineinstrs | FileCheck -check-prefix=GFX1100 %s

define float @fmul_select_f32_test1(float %x, i1 %bool) {
; GFX9-LABEL: fmul_select_f32_test1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_and_b32_e32 v1, 1, v1
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v1
; GFX9-NEXT:    v_cndmask_b32_e64 v1, 1.0, 2.0, vcc
; GFX9-NEXT:    v_mul_f32_e32 v0, v0, v1
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1030-LABEL: fmul_select_f32_test1:
; GFX1030:       ; %bb.0:
; GFX1030-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1030-NEXT:    v_and_b32_e32 v1, 1, v1
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v1
; GFX1030-NEXT:    v_cndmask_b32_e64 v1, 1.0, 2.0, vcc_lo
; GFX1030-NEXT:    v_mul_f32_e32 v0, v0, v1
; GFX1030-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1100-LABEL: fmul_select_f32_test1:
; GFX1100:       ; %bb.0:
; GFX1100-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1100-NEXT:    v_and_b32_e32 v1, 1, v1
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_1)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v1
; GFX1100-NEXT:    v_cndmask_b32_e64 v1, 1.0, 2.0, vcc_lo
; GFX1100-NEXT:    v_mul_f32_e32 v0, v0, v1
; GFX1100-NEXT:    s_setpc_b64 s[30:31]
  %1 = select i1 %bool, float 2.000000e+00, float 1.000000e+00
  %ldexp = fmul float %x, %1
  ret float %ldexp
}

define float @fmul_select_f32_test2(float %x, i1 %bool) {
; GFX9-LABEL: fmul_select_f32_test2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_and_b32_e32 v1, 1, v1
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v1
; GFX9-NEXT:    v_cndmask_b32_e64 v1, 1.0, 0.5, vcc
; GFX9-NEXT:    v_mul_f32_e32 v0, v0, v1
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1030-LABEL: fmul_select_f32_test2:
; GFX1030:       ; %bb.0:
; GFX1030-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1030-NEXT:    v_and_b32_e32 v1, 1, v1
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v1
; GFX1030-NEXT:    v_cndmask_b32_e64 v1, 1.0, 0.5, vcc_lo
; GFX1030-NEXT:    v_mul_f32_e32 v0, v0, v1
; GFX1030-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1100-LABEL: fmul_select_f32_test2:
; GFX1100:       ; %bb.0:
; GFX1100-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1100-NEXT:    v_and_b32_e32 v1, 1, v1
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_1)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v1
; GFX1100-NEXT:    v_cndmask_b32_e64 v1, 1.0, 0.5, vcc_lo
; GFX1100-NEXT:    v_mul_f32_e32 v0, v0, v1
; GFX1100-NEXT:    s_setpc_b64 s[30:31]
  %1 = select i1 %bool, float 0.500000e+00, float 1.000000e+00
  %ldexp = fmul float %x, %1
  ret float %ldexp
}

define <2 x float> @fmul_select_v2f32_test1(<2 x float> %x, <2 x i1> %bool) {
; GFX9-LABEL: fmul_select_v2f32_test1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_and_b32_e32 v3, 1, v3
; GFX9-NEXT:    v_and_b32_e32 v2, 1, v2
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v3
; GFX9-NEXT:    v_cndmask_b32_e64 v3, 1.0, 2.0, vcc
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v2
; GFX9-NEXT:    v_cndmask_b32_e64 v2, 1.0, 2.0, vcc
; GFX9-NEXT:    v_mul_f32_e32 v0, v0, v2
; GFX9-NEXT:    v_mul_f32_e32 v1, v1, v3
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1030-LABEL: fmul_select_v2f32_test1:
; GFX1030:       ; %bb.0:
; GFX1030-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1030-NEXT:    v_and_b32_e32 v2, 1, v2
; GFX1030-NEXT:    v_and_b32_e32 v3, 1, v3
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v2
; GFX1030-NEXT:    v_cndmask_b32_e64 v2, 1.0, 2.0, vcc_lo
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v3
; GFX1030-NEXT:    v_mul_f32_e32 v0, v0, v2
; GFX1030-NEXT:    v_cndmask_b32_e64 v3, 1.0, 2.0, vcc_lo
; GFX1030-NEXT:    v_mul_f32_e32 v1, v1, v3
; GFX1030-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1100-LABEL: fmul_select_v2f32_test1:
; GFX1100:       ; %bb.0:
; GFX1100-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1100-NEXT:    v_and_b32_e32 v2, 1, v2
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_1)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v2
; GFX1100-NEXT:    v_cndmask_b32_e64 v2, 1.0, 2.0, vcc_lo
; GFX1100-NEXT:    v_dual_mul_f32 v0, v0, v2 :: v_dual_and_b32 v3, 1, v3
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_1)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v3
; GFX1100-NEXT:    v_cndmask_b32_e64 v3, 1.0, 2.0, vcc_lo
; GFX1100-NEXT:    v_mul_f32_e32 v1, v1, v3
; GFX1100-NEXT:    s_setpc_b64 s[30:31]
  %1 = select <2 x i1> %bool, <2 x float> <float 2.000000e+00, float 2.000000e+00>, <2 x float> <float 1.000000e+00, float 1.000000e+00>
  %ldexp = fmul <2 x float> %x, %1
  ret <2 x float> %ldexp
}

define <2 x float> @fmul_select_v2f32_test2(<2 x float> %x, <2 x i1> %bool) {
; GFX9-LABEL: fmul_select_v2f32_test2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_and_b32_e32 v3, 1, v3
; GFX9-NEXT:    v_and_b32_e32 v2, 1, v2
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v3
; GFX9-NEXT:    v_cndmask_b32_e64 v3, 1.0, 0.5, vcc
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v2
; GFX9-NEXT:    v_cndmask_b32_e64 v2, 1.0, 0.5, vcc
; GFX9-NEXT:    v_mul_f32_e32 v0, v0, v2
; GFX9-NEXT:    v_mul_f32_e32 v1, v1, v3
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1030-LABEL: fmul_select_v2f32_test2:
; GFX1030:       ; %bb.0:
; GFX1030-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1030-NEXT:    v_and_b32_e32 v2, 1, v2
; GFX1030-NEXT:    v_and_b32_e32 v3, 1, v3
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v2
; GFX1030-NEXT:    v_cndmask_b32_e64 v2, 1.0, 0.5, vcc_lo
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v3
; GFX1030-NEXT:    v_mul_f32_e32 v0, v0, v2
; GFX1030-NEXT:    v_cndmask_b32_e64 v3, 1.0, 0.5, vcc_lo
; GFX1030-NEXT:    v_mul_f32_e32 v1, v1, v3
; GFX1030-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1100-LABEL: fmul_select_v2f32_test2:
; GFX1100:       ; %bb.0:
; GFX1100-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1100-NEXT:    v_and_b32_e32 v2, 1, v2
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_1)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v2
; GFX1100-NEXT:    v_cndmask_b32_e64 v2, 1.0, 0.5, vcc_lo
; GFX1100-NEXT:    v_dual_mul_f32 v0, v0, v2 :: v_dual_and_b32 v3, 1, v3
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_1)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v3
; GFX1100-NEXT:    v_cndmask_b32_e64 v3, 1.0, 0.5, vcc_lo
; GFX1100-NEXT:    v_mul_f32_e32 v1, v1, v3
; GFX1100-NEXT:    s_setpc_b64 s[30:31]
  %1 = select <2 x i1> %bool, <2 x float> <float 0.500000e+00, float 0.500000e+00>, <2 x float> <float 1.000000e+00, float 1.000000e+00>
  %ldexp = fmul <2 x float> %x, %1
  ret <2 x float> %ldexp
}

define double @fmul_select_f64_test1(double %x, i1 %bool) {
; GFX9-LABEL: fmul_select_f64_test1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_and_b32_e32 v2, 1, v2
; GFX9-NEXT:    v_mov_b32_e32 v3, 0x3ff00000
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v2
; GFX9-NEXT:    v_cndmask_b32_e64 v3, v3, 2.0, vcc
; GFX9-NEXT:    v_mov_b32_e32 v2, 0
; GFX9-NEXT:    v_mul_f64 v[0:1], v[0:1], v[2:3]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1030-LABEL: fmul_select_f64_test1:
; GFX1030:       ; %bb.0:
; GFX1030-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1030-NEXT:    v_and_b32_e32 v3, 1, v2
; GFX1030-NEXT:    v_mov_b32_e32 v2, 0
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v3
; GFX1030-NEXT:    v_cndmask_b32_e64 v3, 0x3ff00000, 2.0, vcc_lo
; GFX1030-NEXT:    v_mul_f64 v[0:1], v[0:1], v[2:3]
; GFX1030-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1100-LABEL: fmul_select_f64_test1:
; GFX1100:       ; %bb.0:
; GFX1100-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1100-NEXT:    v_dual_mov_b32 v2, 0 :: v_dual_and_b32 v3, 1, v2
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(SKIP_1) | instid1(VALU_DEP_1)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v3
; GFX1100-NEXT:    v_cndmask_b32_e64 v3, 0x3ff00000, 2.0, vcc_lo
; GFX1100-NEXT:    v_mul_f64 v[0:1], v[0:1], v[2:3]
; GFX1100-NEXT:    s_setpc_b64 s[30:31]
  %1 = select i1 %bool, double 2.000000e+00, double 1.000000e+00
  %ldexp = fmul double %x, %1
  ret double %ldexp
}

define double @fmul_select_f64_test2(double %x, i1 %bool) {
; GFX9-LABEL: fmul_select_f64_test2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_and_b32_e32 v2, 1, v2
; GFX9-NEXT:    v_mov_b32_e32 v3, 0x3ff00000
; GFX9-NEXT:    v_mov_b32_e32 v4, 0x3fe00000
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v2
; GFX9-NEXT:    v_cndmask_b32_e32 v3, v3, v4, vcc
; GFX9-NEXT:    v_mov_b32_e32 v2, 0
; GFX9-NEXT:    v_mul_f64 v[0:1], v[0:1], v[2:3]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1030-LABEL: fmul_select_f64_test2:
; GFX1030:       ; %bb.0:
; GFX1030-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1030-NEXT:    v_and_b32_e32 v3, 1, v2
; GFX1030-NEXT:    v_mov_b32_e32 v4, 0x3fe00000
; GFX1030-NEXT:    v_mov_b32_e32 v2, 0
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v3
; GFX1030-NEXT:    v_cndmask_b32_e32 v3, 0x3ff00000, v4, vcc_lo
; GFX1030-NEXT:    v_mul_f64 v[0:1], v[0:1], v[2:3]
; GFX1030-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1100-LABEL: fmul_select_f64_test2:
; GFX1100:       ; %bb.0:
; GFX1100-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1100-NEXT:    v_dual_mov_b32 v4, 0x3fe00000 :: v_dual_and_b32 v3, 1, v2
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v3
; GFX1100-NEXT:    v_dual_mov_b32 v2, 0 :: v_dual_cndmask_b32 v3, 0x3ff00000, v4
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX1100-NEXT:    v_mul_f64 v[0:1], v[0:1], v[2:3]
; GFX1100-NEXT:    s_setpc_b64 s[30:31]
  %1 = select i1 %bool, double 0.500000e+00, double 1.000000e+00
  %ldexp = fmul double %x, %1
  ret double %ldexp
}

define <2 x double> @fmul_select_v2f64_test1(<2 x double> %x, <2 x i1> %bool) {
; GFX9-LABEL: fmul_select_v2f64_test1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_and_b32_e32 v6, 1, v4
; GFX9-NEXT:    v_and_b32_e32 v7, 1, v5
; GFX9-NEXT:    v_mov_b32_e32 v8, 0x3ff00000
; GFX9-NEXT:    v_mov_b32_e32 v4, 0
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v6
; GFX9-NEXT:    v_cndmask_b32_e64 v6, v8, 2.0, vcc
; GFX9-NEXT:    v_mov_b32_e32 v5, v4
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v7
; GFX9-NEXT:    v_mul_f64 v[0:1], v[0:1], v[5:6]
; GFX9-NEXT:    v_cndmask_b32_e64 v5, v8, 2.0, vcc
; GFX9-NEXT:    v_mul_f64 v[2:3], v[2:3], v[4:5]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1030-LABEL: fmul_select_v2f64_test1:
; GFX1030:       ; %bb.0:
; GFX1030-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1030-NEXT:    v_and_b32_e32 v6, 1, v4
; GFX1030-NEXT:    v_and_b32_e32 v5, 1, v5
; GFX1030-NEXT:    v_mov_b32_e32 v4, 0
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v6
; GFX1030-NEXT:    v_mov_b32_e32 v6, v4
; GFX1030-NEXT:    v_cndmask_b32_e64 v7, 0x3ff00000, 2.0, vcc_lo
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v5
; GFX1030-NEXT:    v_mul_f64 v[0:1], v[0:1], v[6:7]
; GFX1030-NEXT:    v_cndmask_b32_e64 v5, 0x3ff00000, 2.0, vcc_lo
; GFX1030-NEXT:    v_mul_f64 v[2:3], v[2:3], v[4:5]
; GFX1030-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1100-LABEL: fmul_select_v2f64_test1:
; GFX1100:       ; %bb.0:
; GFX1100-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1100-NEXT:    v_and_b32_e32 v6, 1, v4
; GFX1100-NEXT:    v_dual_mov_b32 v4, 0 :: v_dual_and_b32 v5, 1, v5
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v6
; GFX1100-NEXT:    v_mov_b32_e32 v6, v4
; GFX1100-NEXT:    v_cndmask_b32_e64 v7, 0x3ff00000, 2.0, vcc_lo
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_4) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v5
; GFX1100-NEXT:    v_mul_f64 v[0:1], v[0:1], v[6:7]
; GFX1100-NEXT:    v_cndmask_b32_e64 v5, 0x3ff00000, 2.0, vcc_lo
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX1100-NEXT:    v_mul_f64 v[2:3], v[2:3], v[4:5]
; GFX1100-NEXT:    s_setpc_b64 s[30:31]
  %1 = select <2 x i1> %bool, <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double> <double 1.000000e+00, double 1.000000e+00>
  %ldexp = fmul <2 x double> %x, %1
  ret <2 x double> %ldexp
}

define <2 x double> @fmul_select_v2f64_test2(<2 x double> %x, <2 x i1> %bool) {
; GFX9-LABEL: fmul_select_v2f64_test2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_and_b32_e32 v6, 1, v4
; GFX9-NEXT:    v_and_b32_e32 v7, 1, v5
; GFX9-NEXT:    v_mov_b32_e32 v8, 0x3ff00000
; GFX9-NEXT:    v_mov_b32_e32 v9, 0x3fe00000
; GFX9-NEXT:    v_mov_b32_e32 v4, 0
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v6
; GFX9-NEXT:    v_cndmask_b32_e32 v6, v8, v9, vcc
; GFX9-NEXT:    v_mov_b32_e32 v5, v4
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v7
; GFX9-NEXT:    v_mul_f64 v[0:1], v[0:1], v[5:6]
; GFX9-NEXT:    v_cndmask_b32_e32 v5, v8, v9, vcc
; GFX9-NEXT:    v_mul_f64 v[2:3], v[2:3], v[4:5]
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1030-LABEL: fmul_select_v2f64_test2:
; GFX1030:       ; %bb.0:
; GFX1030-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1030-NEXT:    v_and_b32_e32 v6, 1, v4
; GFX1030-NEXT:    v_mov_b32_e32 v8, 0x3fe00000
; GFX1030-NEXT:    v_and_b32_e32 v5, 1, v5
; GFX1030-NEXT:    v_mov_b32_e32 v4, 0
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v6
; GFX1030-NEXT:    v_mov_b32_e32 v6, v4
; GFX1030-NEXT:    v_cndmask_b32_e32 v7, 0x3ff00000, v8, vcc_lo
; GFX1030-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v5
; GFX1030-NEXT:    v_mul_f64 v[0:1], v[0:1], v[6:7]
; GFX1030-NEXT:    v_cndmask_b32_e32 v5, 0x3ff00000, v8, vcc_lo
; GFX1030-NEXT:    v_mul_f64 v[2:3], v[2:3], v[4:5]
; GFX1030-NEXT:    s_setpc_b64 s[30:31]
;
; GFX1100-LABEL: fmul_select_v2f64_test2:
; GFX1100:       ; %bb.0:
; GFX1100-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX1100-NEXT:    v_and_b32_e32 v6, 1, v4
; GFX1100-NEXT:    v_dual_mov_b32 v8, 0x3fe00000 :: v_dual_and_b32 v5, 1, v5
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_2) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v6
; GFX1100-NEXT:    v_dual_mov_b32 v4, 0 :: v_dual_cndmask_b32 v7, 0x3ff00000, v8
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_3) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX1100-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 1, v5
; GFX1100-NEXT:    v_dual_mov_b32 v6, v4 :: v_dual_cndmask_b32 v5, 0x3ff00000, v8
; GFX1100-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_2)
; GFX1100-NEXT:    v_mul_f64 v[0:1], v[0:1], v[6:7]
; GFX1100-NEXT:    v_mul_f64 v[2:3], v[2:3], v[4:5]
; GFX1100-NEXT:    s_setpc_b64 s[30:31]
  %1 = select <2 x i1> %bool, <2 x double> <double 0.500000e+00, double 0.500000e+00>, <2 x double> <double 1.000000e+00, double 1.000000e+00>
  %ldexp = fmul <2 x double> %x, %1
  ret <2 x double> %ldexp
}
