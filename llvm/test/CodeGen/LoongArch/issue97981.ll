; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch32 --verify-machineinstrs < %s | FileCheck %s --check-prefix=LA32S
; RUN: llc --mtriple=loongarch32 --mattr=+f --verify-machineinstrs < %s | FileCheck %s --check-prefix=LA32F
; RUN: llc --mtriple=loongarch32 --mattr=+d --verify-machineinstrs < %s | FileCheck %s --check-prefix=LA32D
; RUN: llc --mtriple=loongarch64 --verify-machineinstrs < %s | FileCheck %s --check-prefix=LA64S
; RUN: llc --mtriple=loongarch64 --mattr=+f --verify-machineinstrs < %s | FileCheck %s --check-prefix=LA64F
; RUN: llc --mtriple=loongarch64 --mattr=+d --verify-machineinstrs < %s | FileCheck %s --check-prefix=LA64D

define half @to_half(i16 %bits) {
; LA32S-LABEL: to_half:
; LA32S:       # %bb.0:
; LA32S-NEXT:    ret
;
; LA32F-LABEL: to_half:
; LA32F:       # %bb.0:
; LA32F-NEXT:    lu12i.w $a1, -16
; LA32F-NEXT:    or $a0, $a0, $a1
; LA32F-NEXT:    movgr2fr.w $fa0, $a0
; LA32F-NEXT:    ret
;
; LA32D-LABEL: to_half:
; LA32D:       # %bb.0:
; LA32D-NEXT:    lu12i.w $a1, -16
; LA32D-NEXT:    or $a0, $a0, $a1
; LA32D-NEXT:    movgr2fr.w $fa0, $a0
; LA32D-NEXT:    ret
;
; LA64S-LABEL: to_half:
; LA64S:       # %bb.0:
; LA64S-NEXT:    ret
;
; LA64F-LABEL: to_half:
; LA64F:       # %bb.0:
; LA64F-NEXT:    lu12i.w $a1, -16
; LA64F-NEXT:    or $a0, $a0, $a1
; LA64F-NEXT:    movgr2fr.w $fa0, $a0
; LA64F-NEXT:    ret
;
; LA64D-LABEL: to_half:
; LA64D:       # %bb.0:
; LA64D-NEXT:    lu12i.w $a1, -16
; LA64D-NEXT:    or $a0, $a0, $a1
; LA64D-NEXT:    movgr2fr.w $fa0, $a0
; LA64D-NEXT:    ret
    %f = bitcast i16 %bits to half
    ret half %f
}

define i16 @from_half(half %f) {
; LA32S-LABEL: from_half:
; LA32S:       # %bb.0:
; LA32S-NEXT:    ret
;
; LA32F-LABEL: from_half:
; LA32F:       # %bb.0:
; LA32F-NEXT:    movfr2gr.s $a0, $fa0
; LA32F-NEXT:    ret
;
; LA32D-LABEL: from_half:
; LA32D:       # %bb.0:
; LA32D-NEXT:    movfr2gr.s $a0, $fa0
; LA32D-NEXT:    ret
;
; LA64S-LABEL: from_half:
; LA64S:       # %bb.0:
; LA64S-NEXT:    ret
;
; LA64F-LABEL: from_half:
; LA64F:       # %bb.0:
; LA64F-NEXT:    movfr2gr.s $a0, $fa0
; LA64F-NEXT:    ret
;
; LA64D-LABEL: from_half:
; LA64D:       # %bb.0:
; LA64D-NEXT:    movfr2gr.s $a0, $fa0
; LA64D-NEXT:    ret
    %bits = bitcast half %f to i16
    ret i16 %bits
}
